<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nuget | Hakan Tuncer's Blog]]></title>
  <link href="http://www.hakantuncer.com/blog/categories/nuget/atom.xml" rel="self"/>
  <link href="http://www.hakantuncer.com/"/>
  <updated>2016-07-16T15:05:29+02:00</updated>
  <id>http://www.hakantuncer.com/</id>
  <author>
    <name><![CDATA[Hakan Tuncer]]></name>
    <email><![CDATA[hakantuncer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Simple Nfield.SDK App]]></title>
    <link href="http://www.hakantuncer.com/blog/2014/04/15/a-simple-nfield-dot-sdk-app/"/>
    <updated>2014-04-15T20:14:15+02:00</updated>
    <id>http://www.hakantuncer.com/blog/2014/04/15/a-simple-nfield-dot-sdk-app</id>
    <content type="html"><![CDATA[<p>In a previous blog post I covered the step by step process of <a href="/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget/">publishing Nfield.SDK to NuGet</a>.</p>

<p>After publishing Nfield.SDK, a natural follow up is to create a simple app that installs Nfield.SDK through NuGet and does something useful with it.</p>

<blockquote><p>To learn more about Nfield or to <a href="http://nfieldmr.com/get-started.aspx" target="_blank">get started</a> visit <a href="http://nfieldmr.com/" target="_blank">nfieldmr.com</a></p></blockquote>

<h2>Installing Nfield.SDK in a Console Application</h2>

<p>What is better than a windows console application to prove that it&rsquo;s really easy to install and use Nfield.SDK. Let&rsquo;s fire up Visual Studio, create a Console Application and install Nfield.SDK through NuGet.</p>

<p>Opening the package manager for my console app and typing nfield in the search box brings me the Nfield.SDK NuGet package:</p>

<p><img src="/assets/A_Simple_NfieldSDK_App/NfieldSDK_Online_InNuget.png" alt="Nfield SDK Online in Nuget" /></p>

<p>After clicking install, I see that Nfield.SDK is automatically installed and referenced from my project.</p>

<p><img src="/assets/A_Simple_NfieldSDK_App/NfieldSDK_In_My_Project.png" alt="Nfield SDK Installed In My Project" /></p>

<p>Wait a moment&hellip; I only installed Nfield.SDK but now I see that &ldquo;Json.NET&rdquo;, &ldquo;Microsoft ASP.NET Web API Client Libraries&rdquo; and &ldquo;Microsoft .NET Framework 4 HTTP Client Libraries&rdquo; also got installed. As discussed in the <a href="/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget/">previos blog post</a> NuGet is smart enough to recursively install packages and all of their dependencies.</p>

<p>In this case Nfield.SDK has a direct dependency to &ldquo;Microsoft ASP.NET Web API Client&rdquo;:</p>

<p><img src="/assets/A_Simple_NfieldSDK_App/Nfield.SDK_Dependencies.png" alt="Nfield SDK Dependencies on NuGet" /></p>

<p>And &ldquo;Microsoft ASP.NET Web API Client&rdquo; has direct dependency to the rest:</p>

<p><img src="/assets/A_Simple_NfieldSDK_App/WebApiClient_Dependencies.png" alt="WebApi Client Dependencies on NuGet" /></p>

<p>The point here is that NuGet took care of all the dependencies of my application in one click of an install button.</p>

<h2>Getting ready for coding</h2>

<p>Focusing back to the console application, I&rsquo;m going to create an app that is going to add an interviewer to my domain on Nfield. In order to do that, I need one more ingredient to take care of: an <a href="http://en.wikipedia.org/wiki/Inversion_of_control">Inversion of Control Container</a>.</p>

<p>Nfield.SDK implementation is a little opinionated about the usage of an IoC Container together with it. It won&rsquo;t dictate you which one to use that&rsquo;s why it has an initializer that accepts some key registration methods:</p>

<p>``` csharp</p>

<pre><code>    /// &lt;summary&gt;
    /// Method that registers all known types by calling the delegates provided.
    /// This method must be called before using the SDK.
    /// &lt;/summary&gt;
    /// &lt;param name="registerTransient"&gt;Method that registers a Transient type.&lt;/param&gt;
    /// &lt;param name="registerSingleton"&gt;Method that registers a Singleton.&lt;/param&gt;
    /// &lt;param name="registerInstance"&gt;Method that registers an instance.&lt;/param&gt;
    public static void Initialize(Action&lt;Type, Type&gt; registerTransient, 
                                  Action&lt;Type, Type&gt; registerSingleton,
                                  Action&lt;Type, Object&gt; registerInstance)
</code></pre>

<p>```</p>

<br>


<blockquote><p>If you don&rsquo;t know what an IoC Container is there is nothing to worry about. If you just copy the short setup code that I&rsquo;m going to share in a second you&rsquo;re ready to use Nfield.SDK. You don&rsquo;t have to use IoC for your application logic. Again, if you&rsquo;re new to IoC Containers I recommend reading <a href="http://martinfowler.com/articles/injection.html">this paper from Martin Fowler</a>.</p></blockquote>

<p>An IoC container that we frequently use at NIPO Software is <a href="http://www.ninject.org/">Ninject</a>. I&rsquo;ll install it to my project using NuGet again (only the top one in the list below is sufficient).</p>

<p><img src="/assets/A_Simple_NfieldSDK_App/AddingNinjectToMyApp.png" alt="Adding Ninject To My App" /></p>

<h2>Nfield.SDK in action</h2>

<p>Good. Now I&rsquo;m ready to write my actual business logic. Signing into my Nfield domain and creating an interviewer. Here is how the code looks like:</p>

<p>``` csharp
using System;
using Nfield.Infrastructure;
using Nfield.Models;
using Nfield.Services;
using Ninject;</p>

<p>namespace TestNfieldApp
{</p>

<pre><code>class Program
{
    static void Main(string[] args)
    {
        using (IKernel kernel = new StandardKernel())
        {
            InitializeNfield(kernel);

            const string serverUrl = "https://api.nfieldbeta.com/v1";

            // First step is to get an INfieldConnection which provides services used for data access and manipulation. 
            var connection = NfieldConnectionFactory.Create(new Uri(serverUrl));

            // User must sign in to the Nfield server with the appropriate credentials prior to using any of the services.
            connection.SignInAsync("H", "DA", "******").Wait();

            var interviewersService = connection.GetService&lt;INfieldInterviewersService&gt;();

            interviewersService.AddAsync(new Interviewer
            {
                ClientInterviewerId = "hakantun",
                UserName = "hakant",
                FirstName = "Hakan",
                LastName = "Tuncer",
                EmailAddress = "h.tuncer@niposoftware.com",
                Password = "hakan12"
            }).Wait();
        }
    }

    /// &lt;summary&gt;
    /// Example of initializing the SDK with Ninject as the IoC container.
    /// &lt;/summary&gt;
    private static void InitializeNfield(IKernel kernel)
    {
        DependencyResolver.Register(type =&gt; kernel.Get(type), type =&gt; kernel.GetAll(type));

        NfieldSdkInitializer.Initialize((bind, resolve) =&gt; kernel.Bind(bind).To(resolve).InTransientScope(),
                                        (bind, resolve) =&gt; kernel.Bind(bind).To(resolve).InSingletonScope(),
                                        (bind, resolve) =&gt; kernel.Bind(bind).ToConstant(resolve));
    }
}
</code></pre>

<p>}
```</p>

<p>After I run this application and go to the interviewers page of my domain, I see that the inverviewer I just added is now listed there. Below is a screenshot from the beta version of <a href="https://manager.nfieldbeta.com/">Nfield Management Interface</a> (authentication required).</p>

<p><img src="/assets/A_Simple_NfieldSDK_App/InterviewerAdded_Success.png" alt="Interviewer Added Successfuly" /></p>

<p>The code I used gets a reference to INfieldInterviewersService and adds an interviewer using this interface.</p>

<p>``` csharp
var interviewersService = connection.GetService<INfieldInterviewersService>();</p>

<p>interviewersService.AddAsync(new Interviewer
{</p>

<pre><code>ClientInterviewerId = "hakantun",
UserName = "hakant",
FirstName = "Hakan",
LastName = "Tuncer",
EmailAddress = "h.tuncer@niposoftware.com",
Password = "hakan12"
</code></pre>

<p>}).Wait();
```</p>

<p>Nfield.SDK has many service interfaces that allow clients to control various aspects of their research projects.</p>

<p>``` csharp
public static void Initialize(Action&lt;Type, Type> registerTransient,</p>

<pre><code>                                  Action&lt;Type, Type&gt; registerSingleton,
                                  Action&lt;Type, Object&gt; registerInstance)
</code></pre>

<p>{</p>

<pre><code>registerTransient(typeof(NfieldConnection), typeof(NfieldConnection));
registerTransient(typeof(INfieldInterviewersService), typeof(NfieldInterviewersService));
registerTransient(typeof(INfieldSurveysService), typeof(NfieldSurveysService));
registerTransient(typeof(INfieldSurveyDataService), typeof(NfieldSurveyDataService));
registerTransient(typeof(INfieldBackgroundTasksService), typeof(NfieldBackgroundTasksService));
registerTransient(typeof(INfieldSurveyScriptService), typeof(NfieldSurveyScriptService));
registerTransient(typeof(INfieldFieldworkOfficesService), typeof(NfieldFieldworkOfficesService));
registerTransient(typeof(INfieldMediaFilesService), typeof(NfieldMediaFilesService));
registerTransient(typeof(INfieldLanguagesService), typeof(NfieldLanguagesService));
registerTransient(typeof(INfieldTranslationsService), typeof(NfieldTranslationsService));
registerTransient(typeof(INfieldSurveySettingsService), typeof(NfieldSurveySettingsService));
registerTransient(typeof(INfieldSurveyResponseCodesService), typeof(NfieldSurveyResponseCodesService));
registerTransient(typeof(INfieldAddressesService), typeof(NfieldAddressesService));
registerTransient(typeof(INfieldHttpClient), typeof(NfieldHttpClient));
registerTransient(typeof(IFileSystem), typeof(FileSystem));
</code></pre>

<p>}
```</p>

<p>I think that&rsquo;s a post. I hope I could shed some light on getting up and running with Nfield.SDK and the various things that you can do with it.</p>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Publishing Nfield.SDK to NuGet]]></title>
    <link href="http://www.hakantuncer.com/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget/"/>
    <updated>2014-04-13T18:34:32+02:00</updated>
    <id>http://www.hakantuncer.com/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget</id>
    <content type="html"><![CDATA[<p>A couple of days ago I published Nfield.SDK to NuGet. In this blog post I want to describe the steps that are involved. Obviously this process will equally apply to publishing / consuming any other software library or package using NuGet.</p>

<h2>What is Nfield SDK</h2>

<p>Me and my colleagues at <a href="http://www.niposoftware.com/">NIPO Software</a> are building the next generation data collection platform called <a href="http://www.nfieldmr.com/">Nfield</a>. Nfield has an <a href="https://github.com/NIPOSoftware/Nfield-SDK">open source SDK</a> that market research offices can use to streamline and automate setting up their research projects.</p>

<h2>NuGet and Package Management Systems</h2>

<p>If you&rsquo;re a .NET developer or familiar with Microsoft development environment you probably know what Nuget is. Nuget is an open source package manager for Microsoft development platform (including .NET). Package management systems make poor developers' lives rock (well almost). It eases everything about installing libraries and managing dependencies. It also opens up lots of automation possibilities &ndash; like integrating dependency management into the build process. The home of nuget is <a href="http://www.nuget.org">www.nuget.org</a>.</p>

<p>Most platforms have their own package management systems. Ruby has <a href="https://rubygems.org">RubyGems</a>, Node.js has <a href="https://www.npmjs.org">npm</a>, Apache has <a href="http://maven.apache.org">Maven</a> and it works with multiple platforms but it&rsquo;s primarily used by the Java community. Package managers don&rsquo;t only exist in the context of software development. There are also system-wide package managers to install components and applications for operating systems. For more information check out <a href="http://en.wikipedia.org/wiki/Package_management_system">Package Management System</a> and <a href="http://en.wikipedia.org/wiki/List_of_software_package_management_systems">List of Package Management Systems</a> on Wikipedia.</p>

<h2>Step by step &ndash; Publishing Nfield.SDK to NuGet</h2>

<br><br>


<h3>1. Cloning Nfield.SDK from GitHub</h3>

<p>When it comes to Git I have a couple of ways to interact. I either directly use the Git commands from a shell or <a href="https://windows.github.com/">GitHub for Windows</a> and lately I&rsquo;m also very happy with the Git integration of Visual Studio 2013. In this case I&rsquo;ll just go ahead and use GitHub for Windows to clone Nfield.SDK to my local repository.</p>

<p><img src="/assets/NfieldSDK_Nuget/NfieldSDK_GitHub_For_Windows.png" alt="Cloning Nfield SDK" /></p>

<p>After cloning is finished, now all files are on my local repository.</p>

<p><img src="/assets/NfieldSDK_Nuget/NfieldSDK_Folder.png" alt="Nfield SDK Folder" /></p>

<br>


<h3>2. Creating a .nuspec file for Nfield.SDK project</h3>

<p>.nuspec files are XML manifests which describe nuget packages. A .nuspec manifest is used to build a nuget package and it&rsquo;s also stored inside the package after the package is created. There is a <a href="http://docs.nuget.org/docs/reference/nuspec-reference">.nuspec reference</a> in nuget.org.</p>

<p>So whenever we want to create a nuget package, we first need to create a .nuspec file. Nuget.exe command line utility allows us to create .nuspec files from .csproj files. You can also create a blank .nuspec file but pointing to an existing .csproj file makes things a lot easier since it&rsquo;s automatically detecting some of the metadata for us.</p>

<p><code>bash run this command on the directory where the .csproj file is located
nuget spec
</code></p>

<p>After running this nuget command NField.SDK.nuspec file is created for us under the same directory.</p>

<p><img src="/assets/NfieldSDK_Nuget/nuspec_file.png" alt="Nfield SDK nuspec file" /></p>

<p>Let&rsquo;s look at the .nuspec file that is generated:
``` xml
&lt;?xml version=&ldquo;1.0&rdquo;?>
<package >
  <metadata></p>

<pre><code>&lt;id&gt;$id$&lt;/id&gt;
&lt;version&gt;$version$&lt;/version&gt;
&lt;title&gt;$title$&lt;/title&gt;
&lt;authors&gt;$author$&lt;/authors&gt;
&lt;owners&gt;$author$&lt;/owners&gt;
&lt;licenseUrl&gt;http://LICENSE_URL_HERE_OR_DELETE_THIS_LINE&lt;/licenseUrl&gt;
&lt;projectUrl&gt;http://PROJECT_URL_HERE_OR_DELETE_THIS_LINE&lt;/projectUrl&gt;
&lt;iconUrl&gt;http://ICON_URL_HERE_OR_DELETE_THIS_LINE&lt;/iconUrl&gt;
&lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
&lt;description&gt;$description$&lt;/description&gt;
&lt;releaseNotes&gt;Summary of changes made in this release of the package.&lt;/releaseNotes&gt;
&lt;copyright&gt;Copyright 2014&lt;/copyright&gt;
&lt;tags&gt;Tag1 Tag2&lt;/tags&gt;
</code></pre>

<p>  </metadata>
</package>
```</p>

<p>First thing you&rsquo;ll notice is the variable names that start and end with a $ sign. In the next step, when we generate the actual package, the package generator will be told to grab these metadata from the assembly information.</p>

<p>Here is how the assembly information of Nfield.SDK looks like:</p>

<p><img src="/assets/NfieldSDK_Nuget/Nfield.SDK_AssemblyInfo.png" alt="Nfield SDK Assembly info" /></p>

<p>Other fields which don&rsquo;t contain variable names need to be filled in before generating the package. Here is the .nuspec file after I edited all these fields:</p>

<p>``` xml
&lt;?xml version=&ldquo;1.0&rdquo;?>
<package >
  <metadata></p>

<pre><code>&lt;id&gt;$id$&lt;/id&gt;
&lt;version&gt;$version$&lt;/version&gt;
&lt;title&gt;$title$&lt;/title&gt;
&lt;authors&gt;$author$&lt;/authors&gt;
&lt;owners&gt;$author$&lt;/owners&gt;
&lt;licenseUrl&gt;http://www.gnu.org/licenses&lt;/licenseUrl&gt;
&lt;projectUrl&gt;https://github.com/NIPOSoftware/Nfield-SDK&lt;/projectUrl&gt;
&lt;iconUrl&gt;&lt;/iconUrl&gt;
&lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
&lt;description&gt;$description$&lt;/description&gt;
&lt;releaseNotes&gt;&lt;/releaseNotes&gt;
&lt;copyright&gt;Copyright © NIPO Software 2013&lt;/copyright&gt;
&lt;tags&gt;nfield marketresearch capi cawi&lt;/tags&gt;
</code></pre>

<p>  </metadata>
</package>
```</p>

<br>


<h3>3. Creating the actual nuget package (.nupkg) for Nfield.SDK</h3>

<br>


<p><code>bash executing the nuget package command for Nfield.SDK in release mode
nuget pack Nfield.SDK.csproj -Prop Configuration=Release
</code></p>

<p>Notice that &ldquo;nuget pack&rdquo; command is not executed on the .nuspec file but on the .csproj file. But according to the nuget documentation this command picks up both the .nuspec file and the .csproj file from the directory. After executing the pack command here is what I got:</p>

<p><img src="/assets/NfieldSDK_Nuget/Icon_URL_CanNotBeEmpty.png" alt="Nfield SDK - Icon Url Can't be empty" /></p>

<p>For a moment, I thought ignoring the iconUrl entry in the .nuspec file would not be a big deal but I was wrong.</p>

<p>This is what <a href="">.nuspec reference</a> says about the iconUrl:</p>

<blockquote><p>A URL for the image to use as the icon for the package in the Manage NuGet Packages dialog box. This should be a 32x32-pixel .png file that has a transparent background.</p></blockquote>

<p>I immediately headed to <a href="http://nfieldmr.com/">http://nfieldmr.com/</a> to steal an nfield icon and indeed I found one. I shrinked the size to 32x32 and then committed it to the root of Nfield.SDK github repository.. hoping to be able to get a public URL for it afterwards. And voila! check the image below. Clicking the &ldquo;Raw&rdquo; button gives me this URL for my new icon: <a href="https://raw.githubusercontent.com/NIPOSoftware/Nfield-SDK/development/icon-nfield.png">https://raw.githubusercontent.com/NIPOSoftware/Nfield-SDK/development/icon-nfield.png</a></p>

<p><img src="/assets/NfieldSDK_Nuget/nfield-icon-on-github.png" alt="Nfield icon on github" /></p>

<p>So after putting the icon URL into the .nuspec file here is what I have.. the final version of the .nuspec file:</p>

<p>``` xml
&lt;?xml version=&ldquo;1.0&rdquo;?>
<package >
  <metadata></p>

<pre><code>&lt;id&gt;$id$&lt;/id&gt;
&lt;version&gt;$version$&lt;/version&gt;
&lt;title&gt;$title$&lt;/title&gt;
&lt;authors&gt;$author$&lt;/authors&gt;
&lt;owners&gt;$author$&lt;/owners&gt;
&lt;licenseUrl&gt;http://www.gnu.org/licenses&lt;/licenseUrl&gt;
&lt;projectUrl&gt;https://github.com/NIPOSoftware/Nfield-SDK&lt;/projectUrl&gt;
&lt;iconUrl&gt;https://raw.githubusercontent.com/NIPOSoftware/Nfield-SDK/development/icon-nfield.png&lt;/iconUrl&gt;
&lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
&lt;description&gt;$description$&lt;/description&gt;
&lt;releaseNotes&gt;&lt;/releaseNotes&gt;
&lt;copyright&gt;Copyright © NIPO Software 2013&lt;/copyright&gt;
&lt;tags&gt;nfield marketresearch capi cawi&lt;/tags&gt;
</code></pre>

<p>  </metadata>
</package>
```</p>

<p>After running the same nuget pack command one more time, the package is successfully created.</p>

<p><img src="/assets/NfieldSDK_Nuget/SuccessfulPackageCreation_1.png" alt="Nfield SDK - Successful Package Creation 1" /></p>

<p>And here is how the package (.nupkg) looks like in the library folder:</p>

<p><img src="/assets/NfieldSDK_Nuget/SuccessfulPackageCreation_2.png" alt="Nfield SDK - Successful Package Creation 2" /></p>

<h3>4. Publishing the Nfield.SDK package to nuget</h3>

<p>Now I have my nuget package file waiting to be published. Or wait&hellip; maybe I should test it before publishing it to the public NuGet repository. There is a way to create a local package repository on the local file system of the machine and test the package using this local nuget repository. But because this blog post is getting longer than I expected I will save it for another day.</p>

<p>Let&rsquo;s assume that I&rsquo;ve tested the Nfield.SDK nuget package and I&rsquo;m ready to publish it. First thing that is necessary is to get the long due NIPO Software account on nuget.org.</p>

<p>Checkout the screenshot below from nuget.org account page of NIPO Software. Two big buttons on the first row tells me that I can upload packages using nuget.org and I can also manage my existing packages. The other interesting information is the &ldquo;API Key&rdquo; at the bottom. This is a GUID that can be used from the nuget command utility. Using this key it&rsquo;s possible to publish nuget packages from the command line without signing in to nuget.org.</p>

<p><img src="/assets/NfieldSDK_Nuget/NIPOSoftware-NuGet.png" alt="Nipo Software NuGet Account" /></p>

<p>So this means it&rsquo;s possible to publish a nuget package both using nuget.exe from command line and using nuget.org. This is how nuget packages are pushed using nuget.exe:</p>

<p><code>bash publishing Nfield.SDK using nuget.exe
nuget SetApiKey NIPOSoftware-API-Key
nuget push Nfield.SDK.1.0.0.0.nupkg
</code></p>

<p>I took the other approach and directly uploaded the package using nuget.org web interface. After I uploaded the &ldquo;Nfield.SDK.1.0.0.0.nupkg&rdquo; file, nuget.org asked me to verify the details of the package before clicking publish the last time.</p>

<p><img src="/assets/NfieldSDK_Nuget/VerifyingUpload_RightBeforePublish.png" alt="Nfield SDK - Verify NuGet Publish" /></p>

<p>All seems fine for now and I click publish. The package is published for the world to see. Below you see the Nfield.SDK page from the NuGet Gallery. Using &ldquo;Install-Package Nfield.SDK&rdquo; command from the VS Package Manager Console will install Nfield SDK to your project. Also notice near the bottom there is a section called &ldquo;Dependencies&rdquo;. Nfield.SDK depends on one other nuget package and it&rsquo;s visible here. This was automatically handled by nuget when I created the package using the .csproj file.</p>

<p><img src="/assets/NfieldSDK_Nuget/SuccessfullyUploadedNfield.SDK.png" alt="Nfield SDK - Successfully uploaded to Nuget" /></p>

<p>So now as a final step, let&rsquo;s go to Visual Studio and find Nfield.SDK in package manager. Searching for Nfield brings me the Nfield.SDK package. Here is a screenshot right before I installed Nfield.SDK for my Nfield test project which I will discuss in my next blog post.</p>

<p><img src="/assets/NfieldSDK_Nuget/NfieldSDK_Online_InNuget.png" alt="Nfield SDK - Online in NuGet" /></p>

<p>Now that Nfield.SDK is online on NuGet, I can easily install and access it from my own projects. In the next blog post I&rsquo;ll show you how you can install Nfield.SDK and use it to do something useful &ndash; like adding an interviewer to your market research office.</p>

<p>Until then, take care.</p>
]]></content>
  </entry>
  
</feed>
