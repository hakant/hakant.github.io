<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Hakan Tuncer's Blog]]></title>
  <link href="http://www.hakantuncer.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://www.hakantuncer.com/"/>
  <updated>2017-05-31T19:27:39+02:00</updated>
  <id>http://www.hakantuncer.com/</id>
  <author>
    <name><![CDATA[Hakan Tuncer]]></name>
    <email><![CDATA[hakantuncer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up Continuous Delivery for a Node.js REST API - Part 2]]></title>
    <link href="http://www.hakantuncer.com/blog/2017/03/25/setting-up-continuous-delivery-for-a-node-dot-js-rest-api-part-2/"/>
    <updated>2017-03-25T09:48:02+01:00</updated>
    <id>http://www.hakantuncer.com/blog/2017/03/25/setting-up-continuous-delivery-for-a-node-dot-js-rest-api-part-2</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="/blog/2017/02/17/setting-up-continuous-integration-and-delivery-for-a-nodejs-rest-api/">In the first part</a> of this blog post, I shared some fundamental ideas that form as background information for what I want to achieve here. So if you haven’t read that one yet, I recommend you to <a href="/blog/2017/02/17/setting-up-continuous-integration-and-delivery-for-a-nodejs-rest-api/">check it out</a>.</p>

<p>A few months back, I decided to convert my <a href="https://github.com/hakant/HackathonPlannerAPI">hobby project — Hackathon Planner API</a> from pure Javascript to TypeScript and <a href="/blog/2016/11/08/converting-a-node-dot-js-express-api-to-typescript/">wrote a blog post about it</a>. This time I sat down to build an Automated Test Suite and a <a href="https://www.martinfowler.com/articles/continuousIntegration.html">Continuous Delivery (CD)</a> pipeline around it.</p>

<p>Effective automated testing is a natural prerequisite for Continuous Integration &amp; Delivery. How can it not be? If you’re not getting quick and broad feedback from your software, how can you delivery frequently? So having a testable architecture and an effective test strategy is very crucial. Let’s dive in.</p>

<h2>Right Architecture for Subcutaneous Testing</h2>

<p>I’m a huge fan of <a href="https://martinfowler.com/bliki/SubcutaneousTest.html">subcutaneous testing</a>. This type of testing starts right under the UI layer with a large scope (which preferably spans all the way down to the data store) can have a great return on investment. On <a href="https://m.facebook.com/notes/kent-beck/making-making-manifesto/857477870951745/">Kent Beck’s feedback chart</a> it would score high up and to the right: <strong>fast and broad feedback</strong>.</p>

<p><img src="/assets/ContinuousIntegration_Part2/Kent_Beck_Feedback_Chart.png" alt="Kent Beck's Feedback Chart" /></p>

<p>So now that we want to target our automated tests below the delivery mechanism layer (UI, Network etc.), this is where an important architectural decision comes into question. What is the main boundary of my application? Where does my significant business logic start? Plus, how can I make my application boundary very visible and clear to all developers? If you follow down this path of thinking, one nice place to end up is a combination of <a href="https://en.wikipedia.org/wiki/Command_pattern">command</a> and <a href="https://en.wikipedia.org/wiki/Mediator_pattern">mediator</a> patterns.</p>

<p>The combination of these patterns is about sending commands down through a very narrow facade, where every command has a very clean input and output “<a href="https://en.wikipedia.org/wiki/Data_transfer_object">data transfer objects</a>” or POCO’s, POJO’s.. whatever you like to call them depending on your stack of choice. They’re simply objects that carry data and no behavior. </p>

<p>To be able to use this pattern in <a href="https://github.com/hakant/HackathonPlannerAPI">my REST API</a>, I’ve created a simple module in TypeScript that allows me to execute commands and optionally get results from them. It’s here: <a href="https://github.com/hakant/TypeScriptCommandPattern">TypeScriptCommandPattern</a>.</p>

<p>In the example below, you can see how a test request is sent down to the executor and a result is returned back.</p>

<br/>


<script src="https://gist.github.com/hakant/837f08708feed35b2d02b99269f0e916.js"></script>


<p>And here is how a “Hello World” style command handler looks like. Notice that it has a clean request and response definitions. At the end of the implementation we make sure that the handler is registered and mapped to the request. In this structure handlers are singleton objects and they can later be resolved by the type of the request and then get executed.</p>

<br/>


<script src="https://gist.github.com/hakant/c4c29c9d6e98fb3a85c674a4b0ad6b28.js"></script>


<h2>Using this pattern in a real world Node.js REST API</h2>

<p>One great architectural benefit of this pattern is that it allows you to nicely separate an application into many independent scenarios — <a href="https://lostechies.com/jimmybogard/2015/07/02/ndc-talk-on-solid-in-slices-not-layers-video-online/">vertical slices</a>. Take a look at <a href="https://github.com/hakant/HackathonPlannerAPI/tree/master/scenarios">these scenarios from Hackathon Planner</a>:</p>

<p><img src="/assets/ContinuousIntegration_Part2/Hackathon_Planner_Scenarios.png" alt="Kent Beck's Feedback Chart" /></p>

<p>Each of these TypeScript modules are a vertical slice. They’re the full story. Yes they make use of other external modules when necessary, but when developers read through these scenarios, they get the full picture. And if code sharing between these scenarios are done wisely (with correct abstractions), then a change in one scenario is contained and does not necessarily affect any others.</p>

<p>Let’s take a look at the implementation of one of these scenarios and extract some key properties. Let’s pick the scenario in “GetIdeas.ts”:</p>

<br/>


<script src="https://gist.github.com/hakant/6c38b895807a4d721c8c367a5117826f.js"></script>


<ul>
<li><p>Line 3–4: Imports the base async command handling structure and also the container to register itself at the end of the file.</p></li>
<li><p>Line 6–9: External modules that this handler uses.</p></li>
<li><p>Line 11–12: A module that is used by multiple scenarios. Be careful, I say “used” not “reused”. Remember the “<a href="http://udidahan.com/2009/06/07/the-fallacy-of-reuse/">fallacy of reuse</a>”. This module (IdeaPrePostProcessor) is used to massage and sanitize the Idea entities before they’re sent to the user interface and before they’re written to the database. Multiple scenarios use this module the exact same way and for the same need. There are no slight variations per scenario, that’s why it’s a right abstraction and that’s why it’s “use”, not “reuse”.</p></li>
<li><p>Line 14–16: Since our handler is an async one (because it’s accessing the database), it implements the AsyncCommandHandler&lt;TRequest, TResponse> and implements the HandleAsync method that returns a Promise of GetIdeasReponse object.</p></li>
<li><p>Line 17–38: Complete vertical implementation of the handler. It’s basically scanning the database for all the ideas, sorting them based on an algorithm, encapsulating them in the response object and return. Notice that at line 25, the “await” keyword is used. It’s a simple and very readable way of representing asynchronous code. It exists in recent versions of TypeScript as well as in ES7.</p></li>
<li><p>Line 42–47: Request and response objects that are used by this handler are defined and exported. These objects should be available to the rest of the application as well.</p></li>
<li><p>Line 50–52: A singleton instance of the handler is instantiated and registered to the type of the request object. Based on application needs, this can be made more complex and sophisticated. Statically typed languages incorporate lots of ideas around IoC containers whereas dynamically typed languages like javascript, not so much. Also keep in mind that these TypeScript generic constructs only exist at design time. They don’t exist in the transpiled javascript and that makes it impossible to discover or scan these constructs at runtime.</p></li>
</ul>


<h2>Simple &amp; Stupid ExpressJS Routes</h2>

<p>If you have experience with building MVC type web applications or REST API’s you’re probably familiar with the idea of controllers. Routes are the same concept in <a href="http://expressjs.com">ExpressJS</a>. Keeping your routes and controllers nice and clean is a good discipline to have. Remember, we want to contain our core application logic and try not to leak it outside as much as possible. Not to frameworks, not to external libraries.</p>

<p>Hackathon Planner’s most significant route is the Ideas route where ideas are being CRUD and a few further actions are taken against them. Code below shows the routes defined in there. Notice how clean it reads and how all business logic is kept out of it. The only thing these routes do is to pass requests and responses up and down the stream.</p>

<br/>


<script src="https://gist.github.com/hakant/85fbfa3f3d77f82c2b17457a96356d09.js"></script>


<h2>Testing all the Scenarios</h2>

<p>The structure of the software created so far lends itself nicely to the subcutaneous testing style discussed earlier. So I take advantage of this by taking the following actions in the tests:</p>

<ul>
<li><p>Remove the ExpressJS layer that normally sits on top. This is a delivery mechanism and I don’t necessarily need it to test my business logic — since I’ve already separated that logic clearly out of this layer.</p></li>
<li><p>Load all scenario handlers together with the real data store (or a realistic emulator).</p></li>
<li><p>Shoot requests &amp; verify responses.</p></li>
<li><p>In some cases, if verifying the response alone isn&rsquo;t sufficient, go further and directly check the data store for verifying the side effects. In my case it wasn’t necessary, I could both act and verify using my handlers alone.</p></li>
</ul>


<p>Let’s take a look at a few of these tests. Below is a part of <a href="https://jasmine.github.io/">jasmine</a> spec that tests inserting and fetching ideas by running several scenarios.</p>

<br/>


<script src="https://gist.github.com/hakant/a2d1c53fdaa5e7c0d99eeb8e8b4022e2.js"></script>


<p>Here are a few key properties of these tests:</p>

<ul>
<li><p>Lines 17–26: Before each test new NoSql tables are created and after each test they’re dropped. This makes every test run in a sandbox isolated from one another. So they can all run in any random order. In general, this is a characteristic of a unit test, not an integration test. So here we have the best of both worlds!</p></li>
<li><p>All tests run against a DynamoDb local emulator. So the feedback coming from the database is real. I trust that the Amazon team behind DynamoDb makes sure that the emulator behaves exactly the same as the real one in the cloud.</p></li>
<li><p>Integration tests are slow right? No, not if you don’t test against user interfaces, or have many number of network calls, or use slow data storage devices. These tests don’t get into any complexity of testing against a UI; they don’t bring up a web server and make excessive number of network calls; and they make use of an in memory database emulator running on the same box. These 15 tests run in ~2 seconds even though each of them setup and tear down their data tables. So you can run quite a lot of these in a few minutes.</p></li>
<li><p>By their nature, integration tests are broad. They give broad feedback. But this is a trade off because when they fail, you have to dig a little deeper to understand exactly what failed in comparison to the unit tests that are tiny and focused. But that’s a tradeoff I like to make in general.</p></li>
<li><p>Having said that, I’m by no means trying to trash the value of unit tests here. If I see the need — like any piece of code that is significant for the system and does interesting things — I’ll go and unit test that part in isolation. Especially code that’s heavy on algorithmic work. So unit tests are valuable when they’re implemented for the right code against the right abstraction.</p></li>
<li><p>Last but not least, these type of tests (i.e subcutaneous) interacts with the system right at the outside of the significant boundary. This means as long as feature requirements don’t change, these tests remain valid and useful. They can survive large refactorings because they’re not coupled to the implementation details! This is a huge deal in my opinion.</p></li>
</ul>


<p>In next and the last part of this series, I would like to write a few things about my experience with setting up a CD pipeline using <a href="https://circleci.com">CircleCI</a>, which transpiles all TypeScript files, installs dependencies, runs tests and deploys to <a href="https://aws.amazon.com/elasticbeanstalk/">AWS Elastic Beanstalk</a>.</p>

<p>Thanks for reading.</p>

<p>~ Hakan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Continuous Delivery for a Node.js REST API - Part 1]]></title>
    <link href="http://www.hakantuncer.com/blog/2017/02/17/setting-up-continuous-integration-and-delivery-for-a-nodejs-rest-api/"/>
    <updated>2017-02-17T22:01:28+01:00</updated>
    <id>http://www.hakantuncer.com/blog/2017/02/17/setting-up-continuous-integration-and-delivery-for-a-nodejs-rest-api</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>A few months back, I decided to convert my <a href="https://github.com/hakant/HackathonPlannerAPI">hobby project &ndash; Hackathon Planner API</a>
from pure Javascript to <a href="https://www.typescriptlang.org/">TypeScript</a> and <a href="/blog/2016/11/08/converting-a-node-dot-js-express-api-to-typescript/">wrote a blog post about it</a>.
This time I sat down to build an Automated Test Suite and a Continuous Delivery (CD) pipeline around it.</p>

<p>Hackathon Planner API is essentially a REST API written in <a href="https://nodejs.org/en/">Node.js</a> and <a href="http://expressjs.com/">Express</a>.
Stores its data in a NOSQL database (<a href="https://aws.amazon.com/dynamodb/">DynamoDB</a>) and hosted on
<a href="https://aws.amazon.com/elasticbeanstalk/">AWS Elastic Beanstalk</a>.</p>

<p>I thought I would best write this up in 2 blog posts &ndash; due to the fact that most of what I did in this repository
is based on some fundamental concepts which I&rsquo;ve been reading and thinking about in the last few years.</p>

<p>In this post, I would like to touch on a few of these ideas that guided me in my refactoring decisions for
making the codebase cleaner, less coupled and more testable.</p>

<p>In the next post, I&rsquo;ll share some more details and examples from the codebase.</p>

<h2>Enabling Continuous Integation &amp; Delivery</h2>

<p>If you are not very familiar with the terms &ldquo;Continuous Integration&rdquo; (CI) or &ldquo;Continuous Delivery&rdquo; (CD) I suggest checking out
<a href="https://www.thoughtworks.com/continuous-integration">ThoughtWorks website</a>
and <a href="https://www.martinfowler.com/articles/continuousIntegration.html">Martin Fowler&rsquo;s post</a> to learn more about
these software development practices.</p>

<p>I&rsquo;ve intentionally used the word &ldquo;enabling&rdquo; in the title above. I&rsquo;ve seen many brownfield projects
where the team wants to start practicing CI; however, depending on the age
and size of the project this may turn out to be <strong>very difficult, sometimes even impossible</strong>. These are not
practices that can be applied to a project only from the outside. They can&rsquo;t always be easily introduced as
an afterthought either, they have to be built and enabled inside out; and it takes time &amp; effort to get there!</p>

<p>The way I see it; practicing CI or CD are kind of a &ldquo;high performance state&rdquo; a team reaches after getting A
LOT OF THINGS RIGHT; especially around system architecture and automated testing. Skills of the team members
also matter, big time! Committing to trunk everyday without breaking stuff and more importantly, always introducing
a right amount of tests at each new check-in is not an easy task for everyone.</p>

<h2>Clean Architecture</h2>

<p>One of the important lessons I learned from Robert C. Martin&rsquo;s talk <a href="https://vimeo.com/97530863">Clean Architecture and Design</a>
(more resources <a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">here</a>) is that, it&rsquo;s
almost always a good idea to keep your business logic, the heart of your system, clean from external concerns like
frameworks and delivery mechanisms (web frameworks, native application hosts, operating systems etc.).</p>

<p>This is beneficial in many ways. Keeps your business logic clean and free from the complexities of the environment around
it. It also enables great automated testing capabilities which is probably the most important prerequisite of
&ldquo;Continuous Integration&rdquo; way of working and delivering software.</p>

<p>Btw, just because I&rsquo;m referring to Robert C. Martin&rsquo;s clean architecture here doesn&rsquo;t mean I agree with everything
he&rsquo;s suggesting there &ndash; like f.ex his claim on: &ldquo;storage is an insignificant detail&rdquo;. I&rsquo;d still like to think of
storage interaction as an integral part of my system. More on that in a bit.</p>

<h2>Vertical Slices instead of Horizontal Layers</h2>

<p>We&rsquo;ve all built <a href="https://en.wikipedia.org/wiki/Multitier_architecture">n-tier applications</a> where software is structured
in horizontal layers &ndash; most typical layers being Presentation, Business and Data Access. I&rsquo;ve built many
applications in this way and it&rsquo;s almost certain that I&rsquo;ll come across many others in the future.</p>

<p>What&rsquo;s the promise of n-tier and how did it become so widespread? I think this sentence
<a href="https://en.wikipedia.org/wiki/Multitier_architecture">from wikipedia</a> sums it up:</p>

<blockquote><p>N-tier application architecture provides a model by which developers can create flexible and
reusable applications.</p></blockquote>

<p>In recent years; gotten tired of repeating problems introduced by organically grown n-tier applications &ndash; like
tight-coupling, bloated classes or services with multiple responsibilities,
<a href="https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction">organically introduced premature/wrong abstractions</a>;
all leading up to code that has become unreadable and hard to reason about.
You know you&rsquo;re in a &ldquo;generic, reusable n-tier application&rdquo; when you have to jump to definitions up and down
OVER AND OVER AGAIN in order get a slightest clue about what a specific scenario is trying to achieve.</p>

<p>Luckily, there are alternative ideas in the community. One of my favorites is the direction <a href="https://twitter.com/jbogard">Jimmy Bogard</a> is taking
in his talk <a href="https://lostechies.com/jimmybogard/2015/07/02/ndc-talk-on-solid-in-slices-not-layers-video-online/">SOLID in Slices not Layers</a>,
and his library <a href="https://github.com/jbogard/MediatR">MediatR</a> that I&rsquo;ve come to learn and love in the
last few years.</p>

<p>I&rsquo;ve built a few applications using MediatR where I implemented all scenarios (think of these as endpoints in a
REST API) in vertical slices and kept the shared code between them to a minimum. I really enjoyed the
outcome. Readability, <a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)" >cohesion</a> and
<a href="https://lostechies.com/jimmybogard/2016/10/24/vertical-slice-test-fixtures-for-mediatr-and-asp-net-core/">testability</a>
of these applications went really up.</p>

<p>Recently I listened <a href="https://www.dotnetrocks.com/?show=1405">Scott Allen on a podcast</a> where he mentioned
he&rsquo;s also a fan of vertical slicing and he has a <a href="http://odetocode.com/blogs/scott/archive/2016/11/29/addfeaturefolders-and-usenodemodules-on-nuget-for-asp-net-core.aspx">blog post on a related idea</a>.</p>

<p>One other lecture I recommend seeing is by Udi Dahan from NDC Oslo 2016: <a href="https://vimeo.com/131757759">Business Logic, a different perspective</a>
where he talks about <a href="http://udidahan.com/2009/06/07/the-fallacy-of-reuse/">the fallacy of reuse</a>.</p>

<p>Last but not least, I wrote a tiny <a href="https://github.com/jbogard/MediatR">MediatR</a> style
<a href="https://github.com/hakant/TypeScriptCommandPattern">application/command facade in TypeScript</a>. I do make use
of this module in <a href="https://github.com/hakant/HackathonPlannerAPI">HackathonPlannerAPI</a> and I&rsquo;ll write more about
it in my next post.</p>

<h2>Resist the temptation of sharing and reusing code unless you have a good justification and the right abstraction</h2>

<p>Before you decide to share code between application scenarios, think twice, think three times. If you really have
to do it, make sure you build a very clear interface around that component or module. Like Udi Dahan says in his
talk (shared above), USE this component from multiple scenarios, do not RE-USE it: If you find yourself tweaking the
component for each new scenario that&rsquo;s using it, you probably got the boundary wrong. Find the right boundary or
refactor this component back into the scenarios and stop sharing/reusing it.</p>

<p>In <a href="https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8#.k139s48qo">one of my favorite medium posts</a>
I&rsquo;ve read recently, the author really nails it:</p>

<blockquote><p>When Business throws more and more functionality (as expected), we sometimes react like this:
<br/><br/>
<img src="/assets/ContinuousIntegration_Part1/Shared_Logic_1.png" alt="Shared Business Logic-1" />
<br/><br/>
Instead, how should we have reacted:
<br/><br/>
<img src="/assets/ContinuousIntegration_Part1/Shared_Logic_2.png" alt="Shared Business Logic-1" />
<br/><br/></p></blockquote>

<h2>Unit or Integration&hellip; Let&rsquo;s call them all TESTING.</h2>

<p>For a good chunk of my development career, I was told that the &ldquo;unit&rdquo; in unit test is a class. So as a result,
my programming style evolved in a way that I always felt the need to design my classes with this type of testing
in mind: always being able to isolate a class from its surroundings.</p>

<p>I understand that some call this <a href="http://david.heinemeierhansson.com/2014/test-induced-design-damage.html">Test-induced design damage</a>.
Somehow in the world of C#, using Dependency Injection and programming against interfaces still feels very natural
to me. So for me, this is not a big deal and I still find it useful to be able to swap things in and out as
necessary and in every level of my implementation.</p>

<p>However, what I&rsquo;ve come to learn eventually is this: <strong>coupling your tests to your implementation details will
kill you</strong>. Just like <a href="https://vimeo.com/68375232">Ian Cooper explains in his brilliant talk at NDC Oslo</a>. So
if you&rsquo;re writing tests for each and every single one of your classes, it&rsquo;s very likely that you&rsquo;re doing it wrong
and soon you&rsquo;ll find out that your tests are slowing you down instead of giving you the feedback and agility you
were hoping for when you started.</p>

<p>Instead, <strong>find your significant boundaries</strong>. Meaningful boundaries that are composed of one or more classes and
that represent business needs. The key is this: even if your implementation details change, after let&rsquo;s say a BIG
refactoring, your tests SHOULD NOT need to change.</p>

<p>What is a better significant boundary than the whole application boundary? This is essentially what a MediatR style
pattern gives you. One narrow facade for your whole application. What a great boundary to write your tests against!</p>

<h2>Speed of tests matter but technology is changing too</h2>

<p>One big reason (heck, maybe the only reason) why people will tell you to design your system in a
way that you can swap out your database in favor of a test double (f.ex by using a repository pattern) is the speed
of tests.</p>

<p>This could be a necessary evil back in the days where databases and infrastructure was bulky and slow. But is
this still true? For <a href="https://github.com/hakant/HackathonPlannerAPI">Hackathon Planner API project</a>
I wrote 15 tests which execute all application scenarios against a <a href="https://aws.amazon.com/blogs/aws/dynamodb-local-for-desktop-development/">DynamoDB Local Emulator</a>,
so nothing is being swapped in or out on the application side but each test sets up and tears down the NOSQL
document store &ndash; so that all tests are completely isolated from each other.</p>

<p>The result is amazing. It takes ~2 seconds to run all the tests. Let&rsquo;s say if my application grows in
size in the future and that I had to execute 300 tests, it would still take me below a minute to
run all the tests!</p>

<p>I know this example will not represent every project out there in the wild for different sorts of reasons
but when it does, it definitely blurs the line between &ldquo;Service&rdquo; and &ldquo;Unit&rdquo; tests in
<a href="https://martinfowler.com/bliki/TestPyramid.html">the test pyramid</a>:</p>

<br/>


<p><img src="https://martinfowler.com/bliki/images/testPyramid/test-pyramid.png" width="400" alt="Test-Pyramid" /></p>

<br/>


<p>Thanks for reading. In Part 2 there will be code, I promise.</p>

<blockquote><p><strong>Update</strong>:
<br/><br/></p>

<p>Part 2 is now available! You can <a href="/blog/2017/03/25/setting-up-continuous-delivery-for-a-node-dot-js-rest-api-part-2/">reach it here</a>.</p></blockquote>

<p>~Hakan</p>
]]></content>
  </entry>
  
</feed>
