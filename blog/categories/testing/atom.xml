<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Hakan Tuncer's Blog]]></title>
  <link href="http://www.hakantuncer.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://www.hakantuncer.com/"/>
  <updated>2017-02-17T21:58:12+01:00</updated>
  <id>http://www.hakantuncer.com/</id>
  <author>
    <name><![CDATA[Hakan Tuncer]]></name>
    <email><![CDATA[hakantuncer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up Continuous Delivery for a Node.js REST API - Part 1]]></title>
    <link href="http://www.hakantuncer.com/blog/2017/02/17/setting-up-continuous-integration-and-delivery-for-a-nodejs-rest-api/"/>
    <updated>2017-02-17T22:01:28+01:00</updated>
    <id>http://www.hakantuncer.com/blog/2017/02/17/setting-up-continuous-integration-and-delivery-for-a-nodejs-rest-api</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>A few months back, I decided to convert my <a href="https://github.com/hakant/HackathonPlannerAPI">hobby project &ndash; Hackathon Planner API</a>
from pure Javascript to <a href="https://www.typescriptlang.org/">TypeScript</a> and <a href="/blog/2016/11/08/converting-a-node-dot-js-express-api-to-typescript/">wrote a blog post about it</a>.
This time I sat down to build an Automated Test Suite and a Continuous Delivery (CD) pipeline around it.</p>

<p>Hackathon Planner API is essentially a REST API written in <a href="https://nodejs.org/en/">Node.js</a> and <a href="http://expressjs.com/">Express</a>.
Stores its data in a NOSQL database (<a href="https://aws.amazon.com/dynamodb/">DynamoDB</a>) and hosted on
<a href="https://aws.amazon.com/elasticbeanstalk/">AWS Elastic Beanstalk</a>.</p>

<p>I thought I would best write this up in 2 blog posts &ndash; due to the fact that most of what I did in this repository
is based on some fundamental concepts which I&rsquo;ve been reading and thinking about in the last few years.</p>

<p>In this post, I would like to touch on a few of these ideas that guided me in my refactoring decisions for
making the codebase cleaner, less coupled and more testable.</p>

<p>In the next post, I&rsquo;ll share some more details and examples from the codebase.</p>

<h2>Enabling Continuous Integation &amp; Delivery</h2>

<p>If you are not very familiar with the terms &ldquo;Continuous Integration&rdquo; (CI) or &ldquo;Continuous Delivery&rdquo; (CD) I suggest checking out
<a href="https://www.thoughtworks.com/continuous-integration">ThoughtWorks website</a>
and <a href="https://www.martinfowler.com/articles/continuousIntegration.html">Martin Fowler&rsquo;s post</a> to learn more about
these software development practices.</p>

<p>I&rsquo;ve intentionally used the word &ldquo;enabling&rdquo; in the title above. I&rsquo;ve seen many brownfield projects
where the team wants to start practicing CI; however, depending on the age
and size of the project this may turn out to be <strong>very difficult, sometimes even impossible</strong>. These are not
practices that can be applied to a project only from the outside. They can&rsquo;t always be easily introduced as
an afterthought either, they have to be built and enabled inside out; and it takes time &amp; effort to get there!</p>

<p>The way I see it; practicing CI or CD are kind of a &ldquo;high performance state&rdquo; a team reaches after getting A
LOT OF THINGS RIGHT; especially around system architecture and automated testing. Skills of the team members
also matter, big time! Committing to trunk everyday without breaking stuff and more importantly, always introducing
a right amount of tests at each new check-in is not an easy task for everyone.</p>

<h2>Clean Architecture</h2>

<p>One of the important lessons I learned from Robert C. Martin&rsquo;s talk <a href="https://vimeo.com/97530863">Clean Architecture and Design</a>
(more resources <a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">here</a>) is that, it&rsquo;s
almost always a good idea to keep your business logic, the heart of your system, clean from external concerns like
frameworks and delivery mechanisms (web frameworks, native application hosts, operating systems etc.).</p>

<p>This is beneficial in many ways. Keeps your business logic clean and free from the complexities of the environment around
it. It also enables great automated testing capabilities which is probably the most important prerequisite of
&ldquo;Continuous Integration&rdquo; way of working and delivering software.</p>

<p>Btw, just because I&rsquo;m referring to Robert C. Martin&rsquo;s clean architecture here doesn&rsquo;t mean I agree with everything
he&rsquo;s suggesting there &ndash; like f.ex his claim on: &ldquo;storage is an insignificant detail&rdquo;. I&rsquo;d still like to think of
storage interaction as an integral part of my system. More on that in a bit.</p>

<h2>Vertical Slices instead of Horizontal Layers</h2>

<p>We&rsquo;ve all built <a href="https://en.wikipedia.org/wiki/Multitier_architecture">n-tier applications</a> where software is structured
in horizontal layers &ndash; most typical layers being Presentation, Business and Data Access. I&rsquo;ve built many
applications in this way and it&rsquo;s almost certain that I&rsquo;ll come across many others in the future.</p>

<p>What&rsquo;s the promise of n-tier and how did it become so widespread? I think this sentence
<a href="https://en.wikipedia.org/wiki/Multitier_architecture">from wikipedia</a> sums it up:</p>

<blockquote><p>N-tier application architecture provides a model by which developers can create flexible and
reusable applications.</p></blockquote>

<p>In recent years; gotten tired of repeating problems introduced by organically grown n-tier applications &ndash; like
tight-coupling, bloated classes or services with multiple responsibilities,
<a href="https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction">organically introduced premature/wrong abstractions</a>;
all leading up to code that has become unreadable and hard to reason about.
You know you&rsquo;re in a &ldquo;generic, reusable n-tier application&rdquo; when you have to jump to definitions up and down
OVER AND OVER AGAIN in order get a slightest clue about what a specific scenario is trying to achieve.</p>

<p>Luckily, there are alternative ideas in the community. One of my favorites is the direction <a href="https://twitter.com/jbogard">Jimmy Bogard</a> is taking
in his talk <a href="https://lostechies.com/jimmybogard/2015/07/02/ndc-talk-on-solid-in-slices-not-layers-video-online/">SOLID in Slices not Layers</a>,
and his library <a href="https://github.com/jbogard/MediatR">MediatR</a> that I&rsquo;ve come to learn and love in the
last few years.</p>

<p>I&rsquo;ve built a few applications using MediatR where I implemented all scenarios (think of these as endpoints in a
REST API) in vertical slices and kept the shared code between them to a minimum. I really enjoyed the
outcome. Readability, <a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)" >cohesion</a> and
<a href="https://lostechies.com/jimmybogard/2016/10/24/vertical-slice-test-fixtures-for-mediatr-and-asp-net-core/">testability</a>
of these applications went really up.</p>

<p>Recently I listened <a href="https://www.dotnetrocks.com/?show=1405">Scott Allen on a podcast</a> where he mentioned
he&rsquo;s also a fan of vertical slicing and he has a <a href="http://odetocode.com/blogs/scott/archive/2016/11/29/addfeaturefolders-and-usenodemodules-on-nuget-for-asp-net-core.aspx">blog post on a related idea</a>.</p>

<p>One other lecture I recommend seeing is by Udi Dahan from NDC Oslo 2016: <a href="https://vimeo.com/131757759">Business Logic, a different perspective</a>
where he talks about <a href="http://udidahan.com/2009/06/07/the-fallacy-of-reuse/">the fallacy of reuse</a>.</p>

<p>Last but not least, I wrote a tiny <a href="https://github.com/jbogard/MediatR">MediatR</a> style
<a href="https://github.com/hakant/TypeScriptCommandPattern">application/command facade in TypeScript</a>. I do make use
of this module in <a href="https://github.com/hakant/HackathonPlannerAPI">HackathonPlannerAPI</a> and I&rsquo;ll write more about
it in my next post.</p>

<h2>Resist the temptation of sharing and reusing code unless you have a good justification and the right abstraction</h2>

<p>Before you decide to share code between application scenarios, think twice, think three times. If you really have
to do it, make sure you build a very clear interface around that component or module. Like Udi Dahan says in his
talk (shared above), USE this component from multiple scenarios, do not RE-USE it: If you find yourself tweaking the
component for each new scenario that&rsquo;s using it, you probably got the boundary wrong. Find the right boundary or
refactor this component back into the scenarios and stop sharing/reusing it.</p>

<p>In <a href="https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8#.k139s48qo">one of my favorite medium posts</a>
I&rsquo;ve read recently, the author really nails it:</p>

<blockquote><p>When Business throws more and more functionality (as expected), we sometimes react like this:
<br/><br/>
<img src="/assets/ContinuousIntegration_Part1/Shared_Logic_1.png" alt="Shared Business Logic-1" />
<br/><br/>
Instead, how should we have reacted:
<br/><br/>
<img src="/assets/ContinuousIntegration_Part1/Shared_Logic_2.png" alt="Shared Business Logic-1" />
<br/><br/></p></blockquote>

<h2>Unit or Integration&hellip; Let&rsquo;s call them all TESTING.</h2>

<p>For a good chunk of my development career, I was told that the &ldquo;unit&rdquo; in unit test is a class. So as a result,
my programming style evolved in a way that I always felt the need to design my classes with this type of testing
in mind: always being able to isolate a class from its surroundings.</p>

<p>I understand that some call this <a href="http://david.heinemeierhansson.com/2014/test-induced-design-damage.html">Test-induced design damage</a>.
Somehow in the world of C#, using Dependency Injection and programming against interfaces still feels very natural
to me. So for me, this is not a big deal and I still find it useful to be able to swap things in and out as
necessary and in every level of my implementation.</p>

<p>However, what I&rsquo;ve come to learn eventually is this: <strong>coupling your tests to your implementation details will
kill you</strong>. Just like <a href="https://vimeo.com/68375232">Ian Cooper explains in his brilliant talk at NDC Oslo</a>. So
if you&rsquo;re writing tests for each and every single one of your classes, it&rsquo;s very likely that you&rsquo;re doing it wrong
and soon you&rsquo;ll find out that your tests are slowing you down instead of giving you the feedback and agility you
were hoping for when you started.</p>

<p>Instead, <strong>find your significant boundaries</strong>. Meaningful boundaries that are composed of one or more classes and
that represent business needs. The key is this: even if your implementation details change, after let&rsquo;s say a BIG
refactoring, your tests SHOULD NOT need to change.</p>

<p>What is a better significant boundary than the whole application boundary? This is essentially what a MediatR style
pattern gives you. One narrow facade for your whole application. What a great boundary to write your tests against!</p>

<h2>Speed of tests matter but technology is changing too</h2>

<p>One big reason (heck, maybe the only reason) why people will tell you to design your system in a
way that you can swap out your database in favor of a test double (f.ex by using a repository pattern) is the speed
of tests.</p>

<p>This could be a necessary evil back in the days where databases and infrastructure was bulky and slow. But is
this still true? For <a href="https://github.com/hakant/HackathonPlannerAPI">Hackathon Planner API project</a>
I wrote 15 tests which execute all application scenarios against a <a href="https://aws.amazon.com/blogs/aws/dynamodb-local-for-desktop-development/">DynamoDB Local Emulator</a>,
so nothing is being swapped in or out on the application side but each test sets up and tears down the NOSQL
document store &ndash; so that all tests are completely isolated from each other.</p>

<p>The result is amazing. It takes ~2 seconds to run all the tests. Let&rsquo;s say if my application grows in
size in the future and that I had to execute 300 tests, it would still take me below a minute to
run all the tests!</p>

<p>I know this example will not represent every project out there in the wild for different sorts of reasons
but when it does, it definitely blurs the line between &ldquo;Service&rdquo; and &ldquo;Unit&rdquo; tests in
<a href="https://martinfowler.com/bliki/TestPyramid.html">the test pyramid</a>:</p>

<br/>


<p><img src="https://martinfowler.com/bliki/images/testPyramid/test-pyramid.png" width="400" alt="Test-Pyramid" /></p>

<br/>


<p>Thanks for reading. In Part 2 there will be code, I promise.</p>

<p>~Hakan</p>

<!--Share these articles also the pictures. Then link to Scott Allen's podcast and post. Then share MediatR.
Maybe then share your TS mediator. Then end with Udi Dahan's Reuse talk.

https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8#.k139s48qo


* Jimmy Bogard
* Post of Scott Allen
* Mediatr
* Reuse talk from Udi Dahan-->




<!--Use this sentence in your next post-->


<!--With these thoughts in mind, I sat down to refactor the existing REST API to make it architecturally cleaner and 
more testable. I also aimed to write a bunch of stable and fast tests to be plugged into the CI pipeline.-->




<!--Here are some of those areas of interest:

  - What is clean architecture 
  - Ways of structuring the business domain
  - Re-evaluating the idea of "reuse" in software projects
  - Re-evaluating the needs around building "generic" software
  - Traditional n-tier architecture and its pros & cons
  - Testability of an application
  - Stability, correctness and speed of tests
  - Types of tests and the famous test pyramid

and all these things in the context of CI, CD and DevOps, which I believe are truly valuable concepts.-->



]]></content>
  </entry>
  
</feed>
