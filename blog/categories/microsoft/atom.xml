<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Microsoft | Hakan Tuncer's Blog]]></title>
  <link href="http://www.hakantuncer.com/blog/categories/microsoft/atom.xml" rel="self"/>
  <link href="http://www.hakantuncer.com/"/>
  <updated>2016-07-16T15:11:20+02:00</updated>
  <id>http://www.hakantuncer.com/</id>
  <author>
    <name><![CDATA[Hakan Tuncer]]></name>
    <email><![CDATA[hakantuncer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on Finalization and Disposition in .NET]]></title>
    <link href="http://www.hakantuncer.com/blog/2015/03/12/finalization-and-disposition-in-net/"/>
    <updated>2015-03-12T22:04:15+01:00</updated>
    <id>http://www.hakantuncer.com/blog/2015/03/12/finalization-and-disposition-in-net</id>
    <content type="html"><![CDATA[<p>Have you ever thought why disposition pattern is designed the way it is? I hadn&rsquo;t. Sometimes we learn things along the way and never question its basics or roots again. We do it that way because we&rsquo;re told so or because it just worked so far and we never looked back.</p>

<p>Nicole Calinoiu&rsquo;s talk from NDC Oslo taught me many things one of which is how IDisposable pattern is designed and became the way it is. It&rsquo;s an awesome talk, one that I can strongly recommend. I&rsquo;ve embedded the video at the bottom of this page, make sure to check it out.</p>

<p>I saw the talk twice and wanted to take notes for myself. Notes that I can revisit when the details get blurry in my head six months or a year down the path. I&rsquo;ve also double checked or dived into some other details through MSDN and included those in the notes as well.</p>

<h2>Finalization</h2>

<ul>
<li><p>Never ever set any object to NULL to &ldquo;help&rdquo; Garbage Collector do his job. You&rsquo;re not helping him and even making things worse.</p></li>
<li><p>Although .NET Runtime knows about cleaning up memory really well, it can&rsquo;t possibly know the shared resources (file system, network connections, registery etc&hellip;) that your objects are using. Finalization is the object&rsquo;s opportunity to cleanup those resources when it&rsquo;s about to be removed from the memory.</p></li>
<li><p>If a .NET object overrides the method Object.Finalize(), the Garbage Collector will call the Finalize method before cleaning up the object from memory.</p></li>
<li><p>If the object does not override the method Finalize, Garbage Collector doesn&rsquo;t finalize the object (obviously). Here is what <a href="https://msdn.microsoft.com/en-us/library/system.object.finalize%28v=vs.110%29.aspx" target="_blank">MSDN</a> says:</p></li>
</ul>


<blockquote><p>The garbage collector does not mark types derived from Object for finalization unless they override the Finalize method.</p></blockquote>

<ul>
<li>Now comes the part that&rsquo;s obscure in the MSDN documentation. <a href="https://msdn.microsoft.com/en-us/library/system.object.finalize%28v=vs.110%29.aspx" target="_blank">MSDN</a> says (emphasis mine):</li>
</ul>


<blockquote><p>You should override Finalize for a class that uses <strong>unmanaged resources</strong> such as file handles or database connections that must be released when the managed object that uses them is discarded during garbage collection.</p></blockquote>

<ul>
<li><p><strong>Unmanaged resources</strong> mentioned in the documentation are <strong>NOT</strong> the managed wrappers. If you have code that directly uses IntPtr and DllImport then you&rsquo;re using unmanaged resources and you need to be thinking about Finalization.</p></li>
<li><p>Managed wrappers have their own Finalizers (hopefully) so it&rsquo;s not your responsibility to supply another Finalizer on top of that. But if you have any code in a class that looks like the one below, then you need a Finalizer for that specific class.</p></li>
</ul>


<p>``` csharp
[DllImport(&ldquo;advapi32.dll&rdquo;, CharSet= CharSet.Auto, SetLastError=true)]
private static extern int RegOpenKeyEx(IntPtr hKey,</p>

<pre><code>                                   String lpSubKey, 
                                   int ulOptions, 
                                   int samDesired,
                                   out IntPtr phkResult);
</code></pre>

<p>```</p>

<ul>
<li><p>Writing an <strong>unnecessary</strong> Finalizer comes with a cost: delaying the cleanup process of your objects. Finalization brings extra steps to the cleaning process (adding those objects to Finalization queue and running their Finalization logic in a separate thread) which delay freeing up memory for those objects. So beware.</p></li>
<li><p>Finalizers should not access any managed resources. Any managed resource at that point could already be harvested by garbage collector. So basically none of the managed objects can be trusted to exist. Finalizers should only cleanup the unmanaged resources and return.</p></li>
</ul>


<h2>Disposition</h2>

<ul>
<li><p>Finalization happens when the Garbage Collector &ldquo;feels like it&rdquo;. In general you don&rsquo;t have (and shouldn&rsquo;t take) any control on when the GC is running or not. But wouldn&rsquo;t it be nice to cleanup and let go of those shared resources when they&rsquo;re not needed anymore? Hell yeah. It would be terrible to keep locking a file and wait until GC comes to clean it up. This is exactly why Disposition exists.</p></li>
<li><p>When a class implements IDisposable it is basically declaring that it needs to be cleaned up. Whenever you&rsquo;re done with an IDisposable class and you know you&rsquo;re the <strong>only</strong> one using it or the <strong>owner</strong> of its lifecycle, you need to call its Dispose method to clean it up.</p></li>
<li><p>While Disposing a class and releasing its shared resources, we also want to call Finalize if our class is Finalizable. If you try to do that though, compiler gives an error message: &ldquo;Destructors and Finalize can not be called directly&rdquo;. That&rsquo;s why there is a pattern called IDisposable pattern.</p></li>
<li><p><a href="https://msdn.microsoft.com/en-us/library/system.idisposable(v=vs.110).aspx" target="_blank">MSDN documentation on IDisposable interface</a> includes a C# code sample showing how the pattern should be implemented. Notice that because Finalize can not be called directly, another Dispose method is introduced that takes a boolean argument which determines whether the class is being disposed or finalized.</p></li>
</ul>


<p>``` csharp</p>

<p>using System;</p>

<p>class BaseClass : IDisposable
{
   // Flag: Has Dispose already been called?
   bool disposed = false;</p>

<p>   // Public implementation of Dispose pattern callable by consumers.
   public void Dispose()
   {</p>

<pre><code>  Dispose(true);
  GC.SuppressFinalize(this);           
</code></pre>

<p>   }</p>

<p>   // Protected implementation of Dispose pattern.
   protected virtual void Dispose(bool disposing)
   {</p>

<pre><code>  if (disposed)
     return; 

  if (disposing) {
     // Free any other managed objects here. 
     //
  }

  // Free any unmanaged objects here. 
  //
  disposed = true;
</code></pre>

<p>   }</p>

<p>   ~BaseClass()
   {</p>

<pre><code>  Dispose(false);
</code></pre>

<p>   }
}</p>

<p>```</p>

<ul>
<li>Let&rsquo;s look at a few important aspects of this implementation:

<ul>
<li>Class keeps track of whether it has been disposed or not and prevents being disposed more than once.</li>
<li>When a class is being Disposed, the Finalization logic also runs. So it tells the Garbage Collector not to bother Finalizing this object anymore (performance gain):</li>
</ul>
</li>
</ul>


<p><code>csharp
GC.SuppressFinalize(this);
</code></p>

<ul>
<li><p>These days writing a Finalizer is fairly uncommon. Most .NET applications doesn&rsquo;t require a usage of direct pointer to an unmanaged resource. On top of that, now there is a class called <a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle%28v=vs.100%29.aspx" target="_blank">SafeHandle</a> which automatically wraps a pointer to an unmanaged resource. It also handles finalization for you. So this means writing a Finalizer now is very very uncommon. Check the article from Joe Duffy all the way back from 2005: <a href="http://joeduffyblog.com/2005/12/27/never-write-a-finalizer-again-well-almost-never/" target="_blank">Never write a finalizer again (well, almost never)</a></p></li>
<li><p>The whole purpose of IDisposable pattern is to accomodate Finalization and Disposition under a single solution. But because you may never ever write a finalizer again, the whole IDisposable pattern ends up being designed to cover a very very corner case. And it&rsquo;s unfortunate that nothing has changed since 2005&hellip;</p></li>
</ul>


<h2>Nicole Calinoiu&rsquo;s talk from NDC Oslo 2014</h2>

<br/>


<iframe src="http://www.hakantuncer.com//player.vimeo.com/video/97519508" width="100%" height="381" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Publishing Nfield.SDK to NuGet]]></title>
    <link href="http://www.hakantuncer.com/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget/"/>
    <updated>2014-04-13T18:34:32+02:00</updated>
    <id>http://www.hakantuncer.com/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget</id>
    <content type="html"><![CDATA[<p>A couple of days ago I published Nfield.SDK to NuGet. In this blog post I want to describe the steps that are involved. Obviously this process will equally apply to publishing / consuming any other software library or package using NuGet.</p>

<h2>What is Nfield SDK</h2>

<p>Me and my colleagues at <a href="http://www.niposoftware.com/">NIPO Software</a> are building the next generation data collection platform called <a href="http://www.nfieldmr.com/">Nfield</a>. Nfield has an <a href="https://github.com/NIPOSoftware/Nfield-SDK">open source SDK</a> that market research offices can use to streamline and automate setting up their research projects.</p>

<h2>NuGet and Package Management Systems</h2>

<p>If you&rsquo;re a .NET developer or familiar with Microsoft development environment you probably know what Nuget is. Nuget is an open source package manager for Microsoft development platform (including .NET). Package management systems make poor developers' lives rock (well almost). It eases everything about installing libraries and managing dependencies. It also opens up lots of automation possibilities &ndash; like integrating dependency management into the build process. The home of nuget is <a href="http://www.nuget.org">www.nuget.org</a>.</p>

<p>Most platforms have their own package management systems. Ruby has <a href="https://rubygems.org">RubyGems</a>, Node.js has <a href="https://www.npmjs.org">npm</a>, Apache has <a href="http://maven.apache.org">Maven</a> and it works with multiple platforms but it&rsquo;s primarily used by the Java community. Package managers don&rsquo;t only exist in the context of software development. There are also system-wide package managers to install components and applications for operating systems. For more information check out <a href="http://en.wikipedia.org/wiki/Package_management_system">Package Management System</a> and <a href="http://en.wikipedia.org/wiki/List_of_software_package_management_systems">List of Package Management Systems</a> on Wikipedia.</p>

<h2>Step by step &ndash; Publishing Nfield.SDK to NuGet</h2>

<br><br>


<h3>1. Cloning Nfield.SDK from GitHub</h3>

<p>When it comes to Git I have a couple of ways to interact. I either directly use the Git commands from a shell or <a href="https://windows.github.com/">GitHub for Windows</a> and lately I&rsquo;m also very happy with the Git integration of Visual Studio 2013. In this case I&rsquo;ll just go ahead and use GitHub for Windows to clone Nfield.SDK to my local repository.</p>

<p><img src="/assets/NfieldSDK_Nuget/NfieldSDK_GitHub_For_Windows.png" alt="Cloning Nfield SDK" /></p>

<p>After cloning is finished, now all files are on my local repository.</p>

<p><img src="/assets/NfieldSDK_Nuget/NfieldSDK_Folder.png" alt="Nfield SDK Folder" /></p>

<br>


<h3>2. Creating a .nuspec file for Nfield.SDK project</h3>

<p>.nuspec files are XML manifests which describe nuget packages. A .nuspec manifest is used to build a nuget package and it&rsquo;s also stored inside the package after the package is created. There is a <a href="http://docs.nuget.org/docs/reference/nuspec-reference">.nuspec reference</a> in nuget.org.</p>

<p>So whenever we want to create a nuget package, we first need to create a .nuspec file. Nuget.exe command line utility allows us to create .nuspec files from .csproj files. You can also create a blank .nuspec file but pointing to an existing .csproj file makes things a lot easier since it&rsquo;s automatically detecting some of the metadata for us.</p>

<p><code>bash run this command on the directory where the .csproj file is located
nuget spec
</code></p>

<p>After running this nuget command NField.SDK.nuspec file is created for us under the same directory.</p>

<p><img src="/assets/NfieldSDK_Nuget/nuspec_file.png" alt="Nfield SDK nuspec file" /></p>

<p>Let&rsquo;s look at the .nuspec file that is generated:
``` xml
&lt;?xml version=&ldquo;1.0&rdquo;?>
<package >
  <metadata></p>

<pre><code>&lt;id&gt;$id$&lt;/id&gt;
&lt;version&gt;$version$&lt;/version&gt;
&lt;title&gt;$title$&lt;/title&gt;
&lt;authors&gt;$author$&lt;/authors&gt;
&lt;owners&gt;$author$&lt;/owners&gt;
&lt;licenseUrl&gt;http://LICENSE_URL_HERE_OR_DELETE_THIS_LINE&lt;/licenseUrl&gt;
&lt;projectUrl&gt;http://PROJECT_URL_HERE_OR_DELETE_THIS_LINE&lt;/projectUrl&gt;
&lt;iconUrl&gt;http://ICON_URL_HERE_OR_DELETE_THIS_LINE&lt;/iconUrl&gt;
&lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
&lt;description&gt;$description$&lt;/description&gt;
&lt;releaseNotes&gt;Summary of changes made in this release of the package.&lt;/releaseNotes&gt;
&lt;copyright&gt;Copyright 2014&lt;/copyright&gt;
&lt;tags&gt;Tag1 Tag2&lt;/tags&gt;
</code></pre>

<p>  </metadata>
</package>
```</p>

<p>First thing you&rsquo;ll notice is the variable names that start and end with a $ sign. In the next step, when we generate the actual package, the package generator will be told to grab these metadata from the assembly information.</p>

<p>Here is how the assembly information of Nfield.SDK looks like:</p>

<p><img src="/assets/NfieldSDK_Nuget/Nfield.SDK_AssemblyInfo.png" alt="Nfield SDK Assembly info" /></p>

<p>Other fields which don&rsquo;t contain variable names need to be filled in before generating the package. Here is the .nuspec file after I edited all these fields:</p>

<p>``` xml
&lt;?xml version=&ldquo;1.0&rdquo;?>
<package >
  <metadata></p>

<pre><code>&lt;id&gt;$id$&lt;/id&gt;
&lt;version&gt;$version$&lt;/version&gt;
&lt;title&gt;$title$&lt;/title&gt;
&lt;authors&gt;$author$&lt;/authors&gt;
&lt;owners&gt;$author$&lt;/owners&gt;
&lt;licenseUrl&gt;http://www.gnu.org/licenses&lt;/licenseUrl&gt;
&lt;projectUrl&gt;https://github.com/NIPOSoftware/Nfield-SDK&lt;/projectUrl&gt;
&lt;iconUrl&gt;&lt;/iconUrl&gt;
&lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
&lt;description&gt;$description$&lt;/description&gt;
&lt;releaseNotes&gt;&lt;/releaseNotes&gt;
&lt;copyright&gt;Copyright © NIPO Software 2013&lt;/copyright&gt;
&lt;tags&gt;nfield marketresearch capi cawi&lt;/tags&gt;
</code></pre>

<p>  </metadata>
</package>
```</p>

<br>


<h3>3. Creating the actual nuget package (.nupkg) for Nfield.SDK</h3>

<br>


<p><code>bash executing the nuget package command for Nfield.SDK in release mode
nuget pack Nfield.SDK.csproj -Prop Configuration=Release
</code></p>

<p>Notice that &ldquo;nuget pack&rdquo; command is not executed on the .nuspec file but on the .csproj file. But according to the nuget documentation this command picks up both the .nuspec file and the .csproj file from the directory. After executing the pack command here is what I got:</p>

<p><img src="/assets/NfieldSDK_Nuget/Icon_URL_CanNotBeEmpty.png" alt="Nfield SDK - Icon Url Can't be empty" /></p>

<p>For a moment, I thought ignoring the iconUrl entry in the .nuspec file would not be a big deal but I was wrong.</p>

<p>This is what <a href="">.nuspec reference</a> says about the iconUrl:</p>

<blockquote><p>A URL for the image to use as the icon for the package in the Manage NuGet Packages dialog box. This should be a 32x32-pixel .png file that has a transparent background.</p></blockquote>

<p>I immediately headed to <a href="http://nfieldmr.com/">http://nfieldmr.com/</a> to steal an nfield icon and indeed I found one. I shrinked the size to 32x32 and then committed it to the root of Nfield.SDK github repository.. hoping to be able to get a public URL for it afterwards. And voila! check the image below. Clicking the &ldquo;Raw&rdquo; button gives me this URL for my new icon: <a href="https://raw.githubusercontent.com/NIPOSoftware/Nfield-SDK/development/icon-nfield.png">https://raw.githubusercontent.com/NIPOSoftware/Nfield-SDK/development/icon-nfield.png</a></p>

<p><img src="/assets/NfieldSDK_Nuget/nfield-icon-on-github.png" alt="Nfield icon on github" /></p>

<p>So after putting the icon URL into the .nuspec file here is what I have.. the final version of the .nuspec file:</p>

<p>``` xml
&lt;?xml version=&ldquo;1.0&rdquo;?>
<package >
  <metadata></p>

<pre><code>&lt;id&gt;$id$&lt;/id&gt;
&lt;version&gt;$version$&lt;/version&gt;
&lt;title&gt;$title$&lt;/title&gt;
&lt;authors&gt;$author$&lt;/authors&gt;
&lt;owners&gt;$author$&lt;/owners&gt;
&lt;licenseUrl&gt;http://www.gnu.org/licenses&lt;/licenseUrl&gt;
&lt;projectUrl&gt;https://github.com/NIPOSoftware/Nfield-SDK&lt;/projectUrl&gt;
&lt;iconUrl&gt;https://raw.githubusercontent.com/NIPOSoftware/Nfield-SDK/development/icon-nfield.png&lt;/iconUrl&gt;
&lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
&lt;description&gt;$description$&lt;/description&gt;
&lt;releaseNotes&gt;&lt;/releaseNotes&gt;
&lt;copyright&gt;Copyright © NIPO Software 2013&lt;/copyright&gt;
&lt;tags&gt;nfield marketresearch capi cawi&lt;/tags&gt;
</code></pre>

<p>  </metadata>
</package>
```</p>

<p>After running the same nuget pack command one more time, the package is successfully created.</p>

<p><img src="/assets/NfieldSDK_Nuget/SuccessfulPackageCreation_1.png" alt="Nfield SDK - Successful Package Creation 1" /></p>

<p>And here is how the package (.nupkg) looks like in the library folder:</p>

<p><img src="/assets/NfieldSDK_Nuget/SuccessfulPackageCreation_2.png" alt="Nfield SDK - Successful Package Creation 2" /></p>

<h3>4. Publishing the Nfield.SDK package to nuget</h3>

<p>Now I have my nuget package file waiting to be published. Or wait&hellip; maybe I should test it before publishing it to the public NuGet repository. There is a way to create a local package repository on the local file system of the machine and test the package using this local nuget repository. But because this blog post is getting longer than I expected I will save it for another day.</p>

<p>Let&rsquo;s assume that I&rsquo;ve tested the Nfield.SDK nuget package and I&rsquo;m ready to publish it. First thing that is necessary is to get the long due NIPO Software account on nuget.org.</p>

<p>Checkout the screenshot below from nuget.org account page of NIPO Software. Two big buttons on the first row tells me that I can upload packages using nuget.org and I can also manage my existing packages. The other interesting information is the &ldquo;API Key&rdquo; at the bottom. This is a GUID that can be used from the nuget command utility. Using this key it&rsquo;s possible to publish nuget packages from the command line without signing in to nuget.org.</p>

<p><img src="/assets/NfieldSDK_Nuget/NIPOSoftware-NuGet.png" alt="Nipo Software NuGet Account" /></p>

<p>So this means it&rsquo;s possible to publish a nuget package both using nuget.exe from command line and using nuget.org. This is how nuget packages are pushed using nuget.exe:</p>

<p><code>bash publishing Nfield.SDK using nuget.exe
nuget SetApiKey NIPOSoftware-API-Key
nuget push Nfield.SDK.1.0.0.0.nupkg
</code></p>

<p>I took the other approach and directly uploaded the package using nuget.org web interface. After I uploaded the &ldquo;Nfield.SDK.1.0.0.0.nupkg&rdquo; file, nuget.org asked me to verify the details of the package before clicking publish the last time.</p>

<p><img src="/assets/NfieldSDK_Nuget/VerifyingUpload_RightBeforePublish.png" alt="Nfield SDK - Verify NuGet Publish" /></p>

<p>All seems fine for now and I click publish. The package is published for the world to see. Below you see the Nfield.SDK page from the NuGet Gallery. Using &ldquo;Install-Package Nfield.SDK&rdquo; command from the VS Package Manager Console will install Nfield SDK to your project. Also notice near the bottom there is a section called &ldquo;Dependencies&rdquo;. Nfield.SDK depends on one other nuget package and it&rsquo;s visible here. This was automatically handled by nuget when I created the package using the .csproj file.</p>

<p><img src="/assets/NfieldSDK_Nuget/SuccessfullyUploadedNfield.SDK.png" alt="Nfield SDK - Successfully uploaded to Nuget" /></p>

<p>So now as a final step, let&rsquo;s go to Visual Studio and find Nfield.SDK in package manager. Searching for Nfield brings me the Nfield.SDK package. Here is a screenshot right before I installed Nfield.SDK for my Nfield test project which I will discuss in my next blog post.</p>

<p><img src="/assets/NfieldSDK_Nuget/NfieldSDK_Online_InNuget.png" alt="Nfield SDK - Online in NuGet" /></p>

<p>Now that Nfield.SDK is online on NuGet, I can easily install and access it from my own projects. In the next blog post I&rsquo;ll show you how you can install Nfield.SDK and use it to do something useful &ndash; like adding an interviewer to your market research office.</p>

<p>Until then, take care.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft BUILD Conference 2012 – Thoughts &amp; Highlights]]></title>
    <link href="http://www.hakantuncer.com/blog/2012/11/18/microsoft-build-conference-2012-thoughts-and-highlights/"/>
    <updated>2012-11-18T18:29:03+01:00</updated>
    <id>http://www.hakantuncer.com/blog/2012/11/18/microsoft-build-conference-2012-thoughts-and-highlights</id>
    <content type="html"><![CDATA[<p>Microsoft is heading towards a new era with it’s Windows ecosystem and Azure cloud platform.</p>

<h2>Azure adoption on fire</h2>


<p>It’s been repeated several times during the conference that Microsoft is surprised by the demand to their Windows Azure cloud computing platform. In his session, Mark Russinovich mentioned that getting a new  Azure datacenter up and running from the decision phase to reality takes about one and a half years and at the moment they’re constantly investing in new datacenters.</p>

<h2>Weak Windows Store App ecosystem</h2>


<p>On the other hand, the new Windows ecosystem, Windows RT and Windows Phone, are pretty latecomers in the market where iOS and Android devices heavily dominate. These new Windows operating systems and devices have been taken very positively by the tech media  in general but with one big question: Will the Windows app ecosystem be able to catch the momentum and compete with it’s competitors? This has been declared as the weakest spot of the new generation of Windows devices and Microsoft is well aware of it.</p>

<h2>Microsoft is Opening Up – A Mindset Shift</h2>


<p>This is the reason why Microsoft is doing everything it can to get developers on board and convince them building applications for the Windows store. They’ve been trying to present a compelling development story from design stage to submitting the app to the Windows Store, trying to make this a joyful experience for developers building Windows Store apps. They’re educating developers, giving them free ebooks, devices and a lot of sample applications. Everything is done for creating a rapid development momentum that will enrich the Windows Store with many applications.</p>

<p>Another part of this story is about  the steps that Microsoft is taking with it’s technical stack. For many years Microsoft had been very exclusionary of software languages and stacks that were not “invented” under it’s control. Every solution Microsoft was offering needed to be 100% Microsoft.</p>

<p>This “not invented here” mentality seems to be fading away. Microsoft has been investing heavily on Javascript. Chakra engine of IE, the TypeScript language and the Javascript API’s of Windows RT are clear examples of this investment. Strange enough, a Windows 8 application can now completely be written using Javascript, CSS and HTML. Smart move to get more developer support, which is now very critical for Microsoft.</p>

<p>Who would think one day someone would be able to run Linux servers on Microsoft datacenters? Or Azure Command Line Tools would be written in Javascript using Node.js. Microsoft is definitely opening up.</p>

<h2>Some Highlights from the Trip</h2>




<br>


<h5>Monday – October 29</h5>


<ul>
<li>It was somewhat stressful to fly on the worst day of Hurricane Sandy. Fortunately the flight was not cancelled. The route was over the Greenland and there was quite some scene through the window.</li>
</ul>


<p><img src="/assets/BuildConference_2012/MountainsFromPlane.JPG" alt="Mountains from the plane" /></p>

<p><img src="/assets/BuildConference_2012/Flight_Map.JPG" alt="Flight map" /></p>

<p><img src="/assets/BuildConference_2012/IceEverywhere.JPG" alt="Ice everywhere" /></p>

<br>


<ul>
<li>First day was only about registration. There was a long registration queue all day but fortunately it  got much shorter later around 19:00. And I got my badge.</li>
</ul>


<br>


<p><img src="/assets/BuildConference_2012/BuildBadge.jpg" alt="Build Badge" /></p>

<h5>Tuesday – October 30</h5>


<ul>
<li>Heading to the tent for breakfast. Further down, there is a much bigger tent with a Windows logo on it. That’s where keynotes will take place.</li>
</ul>


<p><img src="/assets/BuildConference_2012/TreesRedmond.JPG" alt="BigTent" /></p>

<ul>
<li><p>First keynote was given by Steve Ballmer, CEO of Microsoft. It was about the most important delivery of Microsoft: Windows 8. About how the family of Windows 8 PC’s and mobile devices live in harmony together, with SkyDrive backing them up.</p></li>
<li><p>Steve Ballmer actually gave a demo himself, which was unusual but I think very positive. It’s a general expectation these days: CEO of a high tech company should be “hands on” with the technology. Technically savvy managers are more popular indeed. It looks like Steve also pushes himself towards that direction.</p></li>
<li><p>You can watch the whole show here:</p></li>
</ul>


<p> <a href="http://channel9.msdn.com/Events/Build/2012/1-001">http://channel9.msdn.com/Events/Build/2012/1-001</a></p>

<p><img src="/assets/BuildConference_2012/IMG_0091.JPG" alt="BallmerOnStage" /></p>

<ul>
<li><p>This first day was completely about Windows 8. In fact, Azure Cloud Platform would be the topic of the second keynote on the second day of BUILD conference.</p></li>
<li><p>We were having breakfast and lunch in the big tents that were built right next to the conference buildings. Yes, tents are not very exciting but the food was.</p></li>
</ul>


<p><img src="/assets/BuildConference_2012/photo1.jpg" alt="Good Food" /></p>

<h5>Wednesday – October 31</h5>


<ul>
<li>The second keynote of the BUILD conference was about the other important pursuit of Microsoft, the Azure Cloud, and the applications that developers can build into it. Applications that can be built lego style, using the tools and pulling the libraries as you like.</li>
</ul>


<p><img src="/assets/BuildConference_2012/IMG_0122.JPG" alt="Second Keynote" /></p>

<ul>
<li>Scott Guthrie presented Azure Mobile &amp; Media Services and Hanselman gave a short demo of new ASP.NET features and support for known social networks. All applications written during demos are eventually getting deployed on Azure. So basically now Azure plays a role in every server side technology of Microsoft.</li>
</ul>


<p><img src="/assets/BuildConference_2012/IMG_0127.JPG" alt="Scott Guthrie" /></p>

<p><img src="/assets/BuildConference_2012/IMG_0128.JPG" alt="Hanselman" /></p>

<ul>
<li>After the keynote, heading towards the session buildings. And the red trees of Seattle…</li>
</ul>


<p><img src="/assets/BuildConference_2012/IMG_0131.JPG" alt="Redmond Red Trees" /></p>

<h5>Thursday – November 1</h5>


<ul>
<li>There were four rooms where you can borrow some brain from the experts. Everyone had certain office hours. This was not a very easy experience though. For some of these brains one had to wait a long time in the queue.</li>
</ul>


<p><img src="/assets/BuildConference_2012/photo.jpg" alt="Brain Box" /></p>

<ul>
<li>Channel9 broadcasting studio. It was in the same building where some of the sessions took place.</li>
</ul>


<p><img src="/assets/BuildConference_2012/IMG_0108.JPG" alt="Channel 9" /></p>

<ul>
<li>BUILD conference map on the ground.</li>
</ul>


<p><img src="/assets/BuildConference_2012/IMG_0109.jpg" alt="Conference Map" /></p>

<h5>Friday – November 2</h5>


<p></p>

<ul>
<li>Two public figures Scott Hanselman and Jon Galloway preparing for the last session of the BUILD.</li>
</ul>


<p><img src="/assets/BuildConference_2012/IMG_0211.JPG" alt="Build Last Session" /></p>

<ul>
<li>This strange sign took my attention.</li>
</ul>


<p><img src="/assets/BuildConference_2012/IMG_0203.jpg" alt="Strange Notification" /></p>

<h5>Saturday – November 3</h5>


<ul>
<li><p>At the final day of my trip, after the conference, I found some time to hang around in Seattle.</p></li>
<li><p>A Windows Store in Seattle. At the time of this writing, there are around 60 of these in various states  in U.S.</p></li>
</ul>


<p><img src="/assets/BuildConference_2012/img_0057.jpg" alt="Windows Store in Seattle" /></p>

<ul>
<li>Seattle is the birthplace of Starbucks. As a matter of fact, this Starbucks shop is where it all started.</li>
</ul>


<p><img src="/assets/BuildConference_2012/IMG_0267.JPG" alt="Birthplace of Starbucks" /></p>

<ul>
<li>Somewhere in Seattle, a building on which everybody is sticking gums. I don’t know the reason or the story behind it. But it was really disgusting to be there next to it…</li>
</ul>


<p><img src="/assets/BuildConference_2012/img_02821.jpg" alt="Gum Wall" /></p>

<ul>
<li>Space Needle is one of the symbols of Seattle. I also went up there, obviously a great view.</li>
</ul>


<p><img src="/assets/BuildConference_2012/img_0350.jpg" alt="Seattle Space Needle" /></p>

<ul>
<li>I’ve also seen Chihuly’s Garden &amp; Glass Exhibition. The art here was truly amazing.
<a href="http://www.chihulygardenandglass.com/" target="_blank">Chihuly Garden And Glass &ndash; Website</a></li>
</ul>


<p><img src="/assets/BuildConference_2012/img_0361.jpg" alt="Seattle Space Needle" /></p>

<p><img src="/assets/BuildConference_2012/img_0329.jpg" alt="Seattle Space Needle" /></p>

<p><img src="/assets/BuildConference_2012/img_0338.jpg" alt="Seattle Space Needle" /></p>
]]></content>
  </entry>
  
</feed>
