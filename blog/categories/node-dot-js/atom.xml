<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js | Hakan Tuncer's Blog]]></title>
  <link href="http://www.hakantuncer.com/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://www.hakantuncer.com/"/>
  <updated>2017-07-09T23:23:08+02:00</updated>
  <id>http://www.hakantuncer.com/</id>
  <author>
    <name><![CDATA[Hakan Tuncer]]></name>
    <email><![CDATA[hakantuncer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Quirks of Converting a Node.js Express API to TypeScript]]></title>
    <link href="http://www.hakantuncer.com/blog/2016/11/08/converting-a-node-dot-js-express-api-to-typescript/"/>
    <updated>2016-11-08T21:32:05+01:00</updated>
    <id>http://www.hakantuncer.com/blog/2016/11/08/converting-a-node-dot-js-express-api-to-typescript</id>
    <content type="html"><![CDATA[<p>I started using TypeScript as part of a project I&rsquo;m working on. If you&rsquo;re new to TypeScript or
aren&rsquo;t yet sure about the benefits it can bring to your Javascript codebases, I recommend seeing
<a href="https://channel9.msdn.com/Events/Build/2016/B881">this presentation from Anders Hejlsberg (Build 2016)</a>.</p>

<p>One thing I really like about TypeScript is that it&rsquo;s a superset of Javascript, which means all Javascript
you wrote until now is already valid TypeScript. This makes it possible for anyone to come
into TypeScript and adopt it as much or as little as they want. Anders calls this &ldquo;turning the knob&rdquo;
experience. If you want to go all the way in with the type system, you can do so. Or if you only want to
use it in certain parts of your codebase, you can do that too.</p>

<p>As I learned more about TypeScript, I got convinced that I can benefit from it in most of my Javascript projects,
in particular, the ones that involve rich business domains. As an experiment, I started
converting <a href="https://github.com/hakant/HackathonPlannerAPI">the backend of Hackathon Planner</a>, written in <a href="https://nodejs.org/en/">Node.js</a>
and <a href="http://expressjs.com/">Express</a>, into TypeScript.</p>

<p>All in all, it&rsquo;s been a smooth experience but if
you&rsquo;re a developer yourself, you know that this type of refactorings never happen on a straight line, there
are always bumps and quirks along the way.</p>

<p>Here are a number of things I experienced as I gradually converted all of the codebase from ES6 Javascript
to TypeScript. This repository is open source and on <a href="https://github.com/hakant/HackathonPlannerAPI">GitHub</a>.
TypeScript version of the code might still be on a separate branch if I haven&rsquo;t merged it yet.</p>

<h2>1. At transition, module loading can get tricky in Node.js</h2>

<p>TypeScript shares the <a href="https://www.typescriptlang.org/docs/handbook/modules.html">same concept of a module as ES6</a>.
TypeScript&rsquo;s module import and export syntax is very similar to its ES6 counterpart but the <a href="https://nodejs.org/docs/latest/api/modules.html">CommonJS
module system</a> that Node.js uses is different.</p>

<p>I wanted to slowly port my Javascript to TypeScript so that I can continue making releases in between.
Obviously, this means that part of the code would be transpiled from TypeScript while the other part is
originally Javascript. In many occasions I had to load a module from a .js file and the target
module was transpiled from a .ts (TypeScript) file. <a href="https://github.com/Microsoft/TypeScript/issues/2719">This can cause issues</a>.</p>

<p>Look at the code below and see what happens when &ldquo;ideas.js&rdquo; has to load a module from &ldquo;AdminRepository.ts&rdquo;.
All of a sudden you have to use the &ldquo;default&rdquo; property to be able to access the exported object.
Eventually, when the consumer (idea.js) is also converted to TypeScript, the problem will go away.</p>

<br/>




<script src="https://gist.github.com/hakant/d68576a8d9cc9ed85e8d3c649ad8a856.js"></script>


<h2>2. Adding Type Definition Files to a Project</h2>

<p>Type definition files let you consume third party libraries as if they were written in TypeScript. So
you get all the benefits of type checking, intellisense and all other TypeScript design &amp; compile time
goodness even when the third party library is written in pure Javascript.</p>

<p>Before 2.0 release of TypeScript, finding and using these type definition files could get a bit <a href="https://www.davevoyles.com/2016/02/16/how-to-add-type-definitions-to-a-typescript-project/">painful and
confusing</a> &ndash;
same goes for <a href="https://medium.com/@mweststrate/how-to-create-strongly-typed-npm-modules-1e1bda23a7f4#.7ur75n1hf">creating them</a>.
TypeScript 2.0 fixed some of these issues by introducing a <a href="https://blogs.msdn.microsoft.com/typescript/2016/09/22/announcing-typescript-2-0/#simplified-declaration-file-dts-acquisition">simplified declaration file
acquisition model</a>.</p>

<p>In node.js, in order to grab the underscore.js package, you&rsquo;d use:</p>

<blockquote><p>npm install underscore &mdash;save</p></blockquote>

<p>Now, if you also want to use this package from TypeScript, with strong typing, you&rsquo;ll have to download
the necessary type declaration file as well:</p>

<blockquote><p>npm install @types/underscore &mdash;save</p></blockquote>

<p>Starting with TypeScript 2.0, these type definition files are regular npm packages.</p>

<p>After downloading the type definition file, VS Code stops complaining. Furthermore, I get all type safety
features and intellisense while using this library, which is what I want and why I use TypeScript.</p>

<p><img src="/assets/Node_Express_TypeScript/types_packages.png" alt="Types Packages" /></p>

<p>On the other hand, sometimes a library you&rsquo;re using might not have a type definition file. For example, I&rsquo;m using
a passport extension library called &ldquo;passport-github2&rdquo; which doesn&rsquo;t have a definition file yet
(and probably never will). Inside any TypeScript file that uses this library, VSCode complains that it doesn&rsquo;t
understand this library. TypeScript compilation also results in the same error. But even though the typing file
is missing, the actual library is there and it works during run-time.</p>

<p>But of course we&rsquo;ve a problem here. The problem is that the TypeScript compiler will complain about this missing type definition file
forever. Being a good developer, what you want to do is to avoid having these kinds of error messages lying around
and being ignored.</p>

<p><img src="/assets/Node_Express_TypeScript/missing_typing.png" alt="Missing Typings" /></p>

<p>Having said this, it&rsquo;s worth mentioning that
<a href="https://medium.com/@sam.verschueren/the-one-thing-that-keeps-me-from-using-typescript-839e9bd464d7#.fg5tvva5g">people are complaining</a>
about this aggressive behavior of TypeScript, as it eagerly wants all 3rd party packages to have type definition files. But
there&rsquo;s probably <a href="https://github.com/Microsoft/TypeScript/pull/11446">a solution coming</a>.</p>

<p>Until then, there are 2 possible solutions:</p>

<ul>
<li>Set &ldquo;allowJs&rdquo; compiler option to true (in ts.config file). Although I should warn you that this will not only allow
third party packages to be consumed without type definitions, it will also allow any developer to put pure
javascript code into your project.</li>
<li>Another solution is to declare an <a href="https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules">ambient module</a>
for that library in a separate file &ndash; either marking it with &lsquo;any&rsquo; keyword or with proper types.</li>
</ul>


<p>I chose the latter, because I noticed that &ldquo;allowJs&rdquo; flag has far bigger consequences. It silences a bunch of
other types of errors/warnings which I would like to be informed about. Here is how those ambient modules
look like:</p>

<p><img src="/assets/Node_Express_TypeScript/ambient_modules.png" alt="Ambient Modules" /></p>

<h2>3. Incorrect / Incomplete Type Definition Files</h2>

<p>Sometimes a type definition file (.d.ts file) turns out to be incorrect or incomplete. The screenshot
below shows a situation where the package &ldquo;aws-sdk&rdquo; has an incomplete type definition. It doesn&rsquo;t
know that &ldquo;endpoint&rdquo; property exists even though it does exist in <a href="http://docs.aws.amazon.com/amazondynamodb/latest/gettingstartedguide/GettingStarted.NodeJs.01.html">AWS documentation</a>.</p>

<p><img src="/assets/Node_Express_TypeScript/incorrect_d.ts_file.png" alt="Incorrect type declarations" /></p>

<p>I literally went into the type declaration file I downloaded via npm and added the field &ldquo;endpoint&rdquo;
in there to fix the problem. Probably I have to commit this file into source control now. Unfortunately
I couldn&rsquo;t find a best practice that explains how to properly handle these situations. For now, I&rsquo;ll go
with the solution of manually fixing the definition file and adding it into the source control. Below you
can see the patch I made to the declaration file of AWS-SDK (line commented out).</p>

<p><img src="/assets/Node_Express_TypeScript/clientconfigpartial_d.ts.png" alt="ClientConfigPartial-AWS-SDK" /></p>

<h2>4. Dynamic Augmentation of Javascript Objects</h2>

<p>A very common pattern in javascript is to dynamically extend or augment an object with new or complementary
behavior. Here below, I&rsquo;m using <a href="http://bluebirdjs.com">bluebird.js</a> to convert a callback oriented API
to a Promise based API. All of a sudden though, TypeScript doesn&rsquo;t know about these new &ldquo;async&rdquo; methods that
bluebird has plugged into the dynamodb client.</p>

<p><img src="/assets/Node_Express_TypeScript/promisify_all.png" alt="Bluebird-Promisify-All" /></p>

<p>The solution is to either declare this object as a new interface or mark it as &ldquo;any&rdquo;,
as suggested <a href="https://github.com/Microsoft/TypeScript/issues/8685">here</a>). I&rsquo;ve chosen the first, a more type-safe
approach, and declared my new type in the &ldquo;aws-sdk&rdquo; type declaration file, which solved the problem in
a nicer way imho. See the DynamoDBAsyncClient interface definition below:</p>

<p><img src="/assets/Node_Express_TypeScript/dynamodb_async_client_declaration.png" alt="DynamoDB_Async_Client_Declaration" /></p>

<h2>5. Using import or export in your TypeScript file turns it into a module</h2>

<p>Both in TypeScript and ES6, any file containing a top-level import or export is considered a module. So
right after you use one of these keywords in your Javascript or TypeScript file, it will start behaving like
a module. I stumbled upon this while I was trying to implement an interface that I had created in a separate
file.</p>

<p>Let&rsquo;s first look at a simple case that doesn&rsquo;t make use of modules. Here below there&rsquo;s an interface and its
implementation right below it. See how AdminRepository.ts refers to IAdminRepository interface without
any ceremony.</p>

<br/>




<script src="https://gist.github.com/hakant/ce9a6521a16d871bb652c2f41299312d.js"></script>




<script src="https://gist.github.com/hakant/7c25b55660deffb5556df2357ab5708b.js"></script>


<p>Now look at these other two files, in which the interface exposes a third party object and therefore has to
import that third party module. Note that index.ts can&rsquo;t just refer to that interface anymore, without
actually importing it.</p>

<br/>




<script src="https://gist.github.com/hakant/126bbcdaa477680e4ace2021f9dedd3e.js"></script>




<script src="https://gist.github.com/hakant/88d0907ab7f3c090b4d4404a31c079c5.js"></script>


<p>By the way, I also noticed that <a href="https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines">TypeScript coding guidelines</a>
do not recommend using &ldquo;I&rdquo; as a prefix for interface names. So I need to hold my C# reflexes.</p>

<p>There are more than a few things that one has to do in order to make the TypeScript compiler happy. For anyone
with a &ldquo;Javascript mindset&rdquo; this may feel like unnecessary burden. But once you make this investment,
the amount of help and insight you get from the TypeScript compiler and tooling around it is amazing.</p>

<p>Thanks for reading.</p>

<p>~ Hakan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an Online Quiz Game Using Node.js, Hyperdev, PlayStation Buzz Controllers, Raspberry PI and Nfield]]></title>
    <link href="http://www.hakantuncer.com/blog/2016/09/07/creating-an-online-quiz-game-using-node-dot-js/"/>
    <updated>2016-09-07T20:58:34+02:00</updated>
    <id>http://www.hakantuncer.com/blog/2016/09/07/creating-an-online-quiz-game-using-node-dot-js</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been writing about hackathons and the planner application I&rsquo;ve been busy
with for a while now. The news is that <a href="https://github.com/hakant/HackathonPlanner">Hackathon Planner</a> is live
and used during the last hackathon event on 25 August 2016 at <a href="http://niposoftware.com/">NIPO Software</a>.
36 hackathon ideas were created, voted and team compositions were made using the software. You can
<a href="http://www.hakantuncer.com/assets/Online_Quiz_Game/HackathonPlanner_Final.gif" target="_blank">see it in action here</a>.</p>

<p>This post however, is about something else. It&rsquo;s about a crazy idea of my colleague Rutger de Jong and how we
brought it to life during that last hackathon day: Converting <a href="https://www.niposoftware.com/Products/Nfield">Nfield</a> into an online quiz game that
can be controlled by PlayStation Buzz controllers.</p>

<p><img src="/assets/Online_Quiz_Game/PlayStationBuzz.jpg" alt="Quiz Game with Play Station Buzz" /></p>

<h2>The Team</h2>

<p>Rutger brought together five talented people from NIPO Software with diverse skills. Then he was scratching
his head (on the left) thinking &ldquo;what have I done&hellip;&rdquo; : )</p>

<p><img src="/assets/Online_Quiz_Game/team.jpg" alt="NIPO Software Hackathon - Team" /></p>

<h2>The Architecture</h2>

<p><img src="/assets/Online_Quiz_Game/Architecture-Diagram.png" alt="Quiz Game - Architecture Diagram" /></p>

<h2>How it works</h2>

<br/>


<ul>
<li>A shared screen with a browser is opened and an online interview is started by visiting a specific URL to Nfield.
This online interview is running our little quiz.</li>
<li>Each player grabs one of the PlayStation Buzz controllers that are connected to a computer runing
a node.js application to interpret inputs coming from the controllers.</li>
<li>The online interview that was started in the browser is actually a quiz with a special template (CSS &amp; Javascript).</li>
<li>A random sequence of questions start appearing on the screen, each for 10 seconds.</li>
<li>Players give their answers to each question simultaneously. These answers are received by a node.js application
listening inputs from Buzz controllers and pushes events to the app running on Hyperdev.</li>
<li>Application running on Hyperdev acts as a message hub and broadcaster. It relays the incoming messages to the quiz
running on Nfield and also to the Raspberry PI.</li>
<li>The quiz, running on the browser, receives these message (via our customized template) and picks the corresponding
answers selected by players.</li>
<li>As time is ticking away for each question, the customized template that&rsquo;s running the quiz emits events to the
Raspberry PI, telling it to buzz and blink harder.</li>
<li>Scores are continuously calculated as quiz progresses and in the end the winner is announced.</li>
</ul>


<h2>The code</h2>

<p>You can find all the code that powers this project in the following repository on GitHub:
<a href="https://github.com/hakant/NfieldQuizGame">https://github.com/hakant/NfieldQuizGame</a></p>

<h2>Fun at the demo</h2>

<p>The most obvious (and fun!) demo for a quiz game is to find a number of volunteers from the audience and run a contest!
So that&rsquo;s what we did : )</p>

<p><img src="/assets/Online_Quiz_Game/demo.jpg" alt="Hackathon - Demo" /></p>

<p>&hellip; and here is a screenshot from the quiz:</p>

<p><img src="/assets/Online_Quiz_Game/Quiz-Screenshot.png" alt="Hackathon - Nfield Quiz - Screenshot" /></p>

<p>All in all, once again, it was a great event at the NIPO Software office in Amsterdam. Who knows.. maybe in the very near future,
this little fun project can be put into actual use during various market research events. Without a doubt, it showcases the
power of Nfield and how customizable it is for variety of scenarios.</p>

<p>If you want to know more about each component and what it specifically does, read on.</p>

<h2>System Components</h2>

<br/>


<h4>Hyperdev.com / node.js</h4>

<p><a href="https://hyperdev.com">Hyperdev</a> is a prototyping environment where you can start up and develop a simple node.js application
right within the browser and see your application up and running live in a matter of seconds. Every time you save a file
in your project, hyperdev deploys it automatically in an amazing speed. It uses docker containers and AWS behind the scenes.
It also supports https out of the box, which was important for our purposes (Nfield services run on https so should any
integration or extension with it).</p>

<p>This node.js app running on hyperdev is our orchestrator. It is basically responsible with broadcasting incoming websocket
messages to all subscribers. Each piece of the puzzle (buzz controllers, raspberry pi and nfield) talk to this node app on
hyperdev instead of directly talking to each other, which btw would complicate things as each application would then have to
discover where the others are and be able to connect to them somehow.</p>

<p>In the architecture above, as long as everyone can reach hyperdev, successful communication is guaranteed.</p>

<br/>


<h4>Mac with Buzz Controllers / node.js</h4>

<p>While PlayStation buzz controllers are perfect for a quiz game, the immediate question for our little hackathon
project was; how do we connect to and control these things?</p>

<p><a href="https://www.youtube.com/watch?v=Qkkmz5VZoMQ">Node.js is everywhere</a>, it really is. There is a node package called
<a href="https://github.com/node-hid/node-hid">node-hid</a> which allows you to access USB Human Interface Devices (HID) from
node.js. It basically allows you to read from and write to these devices by using node buffers. We could even connect
these buzzers to Raspberry PI but we ran into a few security issues and pivoted to using a mac instead.</p>

<p>Of course, just being able to read the controller&rsquo;s input buffer doesn&rsquo;t automatically mean you know how to interpret it.
It speaks a certain protocol which you have to understand. While scratching our heads, we found this article:
<a href="http://www.developerfusion.com/article/84338/making-usb-c-friendly/">Working with USB devices in .NET and C#</a> where
the author describes the protocol clearly, well somewhat clearly:</p>

<p><img src="/assets/Online_Quiz_Game/buzz-protocol.jpg" alt="PlayStation Buzz - Protocol" /></p>

<p>Long story short, each controller has a reserved space on a 6 byte area, inside which they flip bits on and off based
on the state of their buttons.</p>

<p>Here is a section of the node.js code running on the Mac that reads inputs from buzz controllers:</p>

<br/>


<script src="https://gist.github.com/hakant/7ee37ee00fccfbf487d2c6d3328f13dd.js"></script>




<br/>


<h4>Raspberry PI / node.js</h4>

<p>Since we couldn&rsquo;t succeed in reading inputs from PlayStation Buzz controllers on our Raspberry PI, we had to come up with another very useful
role for it &ndash; because we simply can&rsquo;t imagine a hackathon project without the PI (!).</p>

<p>One of our teammates said &ldquo;let&rsquo;s use it to signal remaining time at each question &ndash; with some touch of tension&rdquo;.
Then we went ahead and placed a bunch of lights on the PI and a loud buzzer. Using node.js and socket.io, it was
listening to certain type of events to start buzzing with low and high frequencies. As contestants were running out of
time while answering each question, the frequency of buzz and light effects were increasing.</p>

<br/>


<h4>Nfield Online Interviewing System / .NET, Azure</h4>

<p>Nfield Online is a data collection platform powered by NIPO Software. A SaaS platform where market research companies
can create surveys and reach their respondents. Nfield Online is bundled with a powerful domain specific
language, ODIN, created for scripting simple or complex questionnaires. Nfield also has a powerful templating system
where customers can create and run their own templates in their surveys (both for changing the look &amp; feel and behavior of
their questionnaires).</p>

<p>We used this templating system (HTML, CSS and Javascript) to tap into a running interview (in this case, our quiz) and
control it via PlayStation Buzz controllers over the internet. We also used it to send messages to the Raspberry PI
to indicate remaining time per question.</p>

<p>When this template is activated on the interview, which is running our quiz, it connects to the socket.io server
on hyperdev and starts listening to &ldquo;button pressed&rdquo; events from PlayStation Buzz controllers. When a button
is pressed it receives the event and selects the corresponding answer on the quiz for that contestant.</p>

<p>I had a lot of fun working on this project and also writing about it in this blog. Every
technology company should make hackathons a part of their culture. The benefits might not be immediately clear
in the beginning but all those doubts disappear after a few events.</p>

<br/>


<p>Thank you for reading.</p>

<p>~ Hakan</p>
]]></content>
  </entry>
  
</feed>
