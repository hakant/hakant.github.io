<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Aurelia | Hakan Tuncer's Blog]]></title>
  <link href="http://www.hakantuncer.com/blog/categories/aurelia/atom.xml" rel="self"/>
  <link href="http://www.hakantuncer.com/"/>
  <updated>2017-07-09T23:23:08+02:00</updated>
  <id>http://www.hakantuncer.com/</id>
  <author>
    <name><![CDATA[Hakan Tuncer]]></name>
    <email><![CDATA[hakantuncer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implementing an App Walkthrough]]></title>
    <link href="http://www.hakantuncer.com/blog/2016/04/20/implementing-an-app-walkthrough/"/>
    <updated>2016-04-20T22:23:47+02:00</updated>
    <id>http://www.hakantuncer.com/blog/2016/04/20/implementing-an-app-walkthrough</id>
    <content type="html"><![CDATA[<p>I think most professionals who design product interfaces (both physical or software interfaces) will agree
that simplicity and discoverability of an interface is a big winning factor. Simple and discoverable
interfaces are usually self explanatory and for this very reason they tend to provide great user
experiences.</p>

<p>On the other hand, this doesn&rsquo;t mean we should stop providing documentation or user manuals for our
products. A discoverable user interface with a clean, easily accessible documentation is I think what
every product deserves.</p>

<p>When it comes to user manuals or guides, I&rsquo;m so much in favor of a user manual that&rsquo;s deeply connected or
embedded to the user interface rather than a pile of content parked somewhere completely disconnected from
the actual product.</p>

<p>UI embedded manuals can be designed in many ways, one of which is through a concept called &ldquo;App Walkthrough&rdquo;.</p>

<h2>App Walkthrough</h2>

<p>From a conceptual point of view I knew what an app walkthrough is for a very long time but before I sat down
to write this post I was tempted to call it &ldquo;in-app tutorials&rdquo;. After some searching around the topic, I
discovered that it actually has a <a href="http://www.dtelepathy.com/blog/design/ux-flows-how-when-to-design-app-walkthrough">common name</a>.</p>

<blockquote><p>A walkthrough is the process of intentionally revealing functionality to a user.</p></blockquote>

<p>Implementing a successful app walkthrough is <a href="https://www.nngroup.com/articles/mobile-instructional-overlay/">not an easy endeavour at all</a>.
It&rsquo;s like a double edged sword. If you <a href="http://www.webdesignerdepot.com/2014/07/how-to-design-a-successful-web-app-walkthrough/">get it right</a>
it&rsquo;s all unicorns and butterflies. If you get it wrong you can do more harm than good.</p>

<h2>Implementing one for Hackathon Planner</h2>

<p>A couple of days ago I started flirting with the idea of implementing a walkthough for the <a href="https://github.com/hakant/HackathonPlanner">Hackathon
Planner</a>. This is what came out:</p>

<p><img src="/assets/App_Walkthrough/Hackathon-Planner-Walkthrough.gif" alt="Hackathon Planner Walkthrough" /></p>

<p>You can try it by visiting the <a href="http://hackathonplanner.s3-website.eu-central-1.amazonaws.com/">Hackathon Planner preview website</a>.
It is designed to be viewed only once and then gets out of the way forever. There are two things that I still
want to add to this:</p>

<ul>
<li>A quick opt out button on each individual step of the walkthough so that users have an easy way to exit
the tutorial without being forced to complete it.</li>
</ul>


<blockquote><p><strong>Update:</strong> Right after I wrote this blog post, I came across a tutorial that&rsquo;s built into GitHub Desktop (for
Mac). See the screenshot below. Clicking &ldquo;Got it!&rdquo; takes the user to the next step of the tutorial while
clicking the close button on the top left corner stops the tutorial. It&rsquo;s brilliant.
<br/><br/>
<img src="/assets/App_Walkthrough/GitHub_Desktop_Walkthrough.png" alt="GitHub Desktop Walkthrough" /></p></blockquote>

<ul>
<li>An overlay that makes the UI frozen while the tooltips are running. If a user doesn&rsquo;t follow the
tooltip popovers and starts clicking around, things get messy (and this is bound to happen if I
know anything about users).</li>
</ul>


<h2>Show me the code</h2>

<p>Inside the Aurelia app, I&rsquo;ve created a component called &ldquo;<em>TooltipService</em>&rdquo; which is responsible for
orchestrating the walkthrough. There&rsquo;s also a separate data holder class &ldquo;<em>Tooltips</em>&rdquo; that declaratively defines all walkthrough
steps and their contents, positions etc.</p>

<p>Tooltips are created using the <a href="http://v4-alpha.getbootstrap.com/components/popovers/">popover component from Bootstrap 4</a>
(still in alpha at the time of this writing).</p>

<br/>


<script src="https://gist.github.com/hakant/48a5b7c5a4e4f34102f393fbd80dc783.js"></script>




<br/>


<script src="https://gist.github.com/hakant/36345d12467d304e29e444430a8bf747.js"></script>


<p></p>

<p>~Hakan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackathon Planner &amp; My Experience With Aurelia So Far]]></title>
    <link href="http://www.hakantuncer.com/blog/2016/04/06/hackathon-planner-and-my-experience-with-aurelia-so-far/"/>
    <updated>2016-04-06T02:00:00+02:00</updated>
    <id>http://www.hakantuncer.com/blog/2016/04/06/hackathon-planner-and-my-experience-with-aurelia-so-far</id>
    <content type="html"><![CDATA[<p>~2 months ago <a href="/blog/2016/01/30/hackathon-planner-for-nipo-software/">I wrote about Hackathon Planner</a>
and hustled the idea as a candidate project for the next hackathon at NIPO Software. Then the hackathon day arrived.
We formed a team of 6 and spent a day working on it. Rutger shot a time lapse video from that day.</p>

<br/>




<iframe width="700" height="393" src="https://www.youtube.com/embed/GMK8vvJm87A" frameborder="0" allowfullscreen></iframe>


<p>Since then, I continue working on the Hackathon Planner whenever I find some free time here and there. Rutger also
occasionally shows up in the commit history contributing with his CSS superpowers.</p>

<p>I use <a href="https://azure.microsoft.com/en-us/">Azure</a> everyday at work and this time I want to experiement with
<a href="https://aws.amazon.com/">AWS</a>. I&rsquo;ve put up an <a href="http://hackathonplanner.s3-website.eu-central-1.amazonaws.com/">early preview of Hackathon Planner</a>
on Amazon S3. I&rsquo;ll keep updating it from this point on. At the time of this writing, it&rsquo;s only a client
side preview &ndash; actions are only saved on the local storage of the browser. Not very useful yet but it soon will be.
<a href="http://hackathonplanner.s3-website.eu-central-1.amazonaws.com/">Check it out.</a></p>

<h2>Aurelia</h2>

<p><a href="http://aurelia.io/">Aurelia</a> has been my framework of choice for this
<a href="https://en.wikipedia.org/wiki/Single-page_application">single page application</a>. It truly is a great framework in
the sense that it really gets out of your way. After I learned some of the fundamentals of Aurelia, I was basically
good to go. Some periods I even forgot that I was using a framework because it is simply not in your face. Let me
show you some code samples from the project.</p>

<br/>


<h4>ES6 and ES7 in action</h4>

<p>Aurelia takes advantage of the latest javascript standards as much as possible. Take a look at this &ldquo;nav-bar&rdquo;
component from the Hackathon Planner.</p>

<br/>


<script src="https://gist.github.com/hakant/27562e37df6d7bf59f24fd12b316045a.js"></script>


<ul>
<li>First three lines are an example of <a href="https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import">ES6 module importing</a>.
This is how a javascript module can make use of code from external libraries.</li>
<li>Line #5 is an example of an <a href="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.5obmn2df6">ES7 Decorator</a> that is in this case
<a href="http://eisenbergeffect.bluespire.com/aurelia-update-with-decorators-ie9-and-more/">used by Aurelia for dependency injection</a>.
Basically we&rsquo;re telling Aurelia to pass those components as constructor arguments to the NavBar component.</li>
<li>And the rest of the code is the NavBar class that is written based on the <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes">ES6 class specification</a>.
See how clean this component is &ndash; it&rsquo;s pure javascript.</li>
</ul>


<br/>  


<h4>Dynamic application root</h4>

<p>Code below is the entry point to the Hackathon Planner: &ldquo;main.js&rdquo;.</p>

<br/>


<script src="https://gist.github.com/hakant/8c94080e4c61ea04bfaf1a009dbcc25b.js"></script>


<ul>
<li>Line #2 imports a custom authentication service that I wrote and it gets resolved as a singleton instance at line #13.
In Aurelia all dependencies are registered as singleton by default (unless you specify it otherwise).</li>
<li>Based on the authentication status (line #14) aurelia app root is set either to the app or to the login
component. The ability to set arbitrary application roots is a powerful feature of Aurelia that enables some
<a href="http://patrickwalters.net/creating-multipage-apps-using-aurelia-2/">interesting scenarios</a>.</li>
<li>I borrowed this idea from <a href="http://davismj.me/blog/aurelia-auth-pt2/">Matthew James Davis</a>.</li>
</ul>


<br/>


<h4>Validation</h4>

<p>Aurelia also comes with a <a href="https://github.com/aurelia/validation">validation plugin</a> and <a href="http://blog.durandal.io/2016/03/23/aurelia-babel-6-and-jspm-update/">it&rsquo;s currently undergoing some big refactoring</a>.
It still wouldn&rsquo;t hurt to show how it looks like at the moment. Note that the @ensure decorator is recently
deprecated (which means I&rsquo;ll also need to adapt this code going forward).</p>

<p>This is a stripped down version of the project class in Hackathon Planner:</p>

<br/>


<script src="https://gist.github.com/hakant/69363eaf32e2052d2d2697335704555e.js"></script>


<ul>
<li>Line #8 and #10 sets validation rules on those properties and line #20 initializes the validation for this
object.</li>
</ul>


<p>And this event handler in &ldquo;new-card.js&rdquo; validates a project before adding or updating it:</p>

<br/>


<script src="https://gist.github.com/hakant/bbb87af2f2306724bbd1981973b8d83f.js"></script>


<br/>


<h4>Beautiful components</h4>

<p>In Aurelia, user interface components are composed of <a href="http://aurelia.io/docs.html#/aurelia/framework/1.0.0-beta.1.1.4/doc/article/creating-components">view and view-model pairs</a>.
These two are created by Aurelia&rsquo;s dependency injection framework and gets linked to each other via data binding.</p>

<p>Here is one of those pairs from the Hackathon Planner. This is how the overview page is rendered:</p>

<br/>


<script src="https://gist.github.com/hakant/6ab1a376f50b80bd115f765e16a551f4.js"></script>




<br/>


<script src="https://gist.github.com/hakant/7296309c6a7166254ac701a6b27caf47.js"></script>


<p></p>

<ul>
<li>Notice how a component is required into a template at line #2.</li>
<li>And then all projects are looped through and each one is rendered into another component called &ldquo;idea-card&rdquo;
at line #5.</li>
</ul>


<p>Thank you for reading and make sure you check out the <a href="https://github.com/hakant/HackathonPlanner">Hackathon Planner on GitHub</a>
and <a href="http://hackathonplanner.s3-website.eu-central-1.amazonaws.com/">its early preview deployment</a>.</p>

<p>~Hakan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackathon Planner for <br/> { NIPO Software }]]></title>
    <link href="http://www.hakantuncer.com/blog/2016/01/30/hackathon-planner-for-nipo-software/"/>
    <updated>2016-01-30T09:29:33+01:00</updated>
    <id>http://www.hakantuncer.com/blog/2016/01/30/hackathon-planner-for-nipo-software</id>
    <content type="html"><![CDATA[<p>I learn best by practicing. When I only read (i.e no practicing, no note taking), I almost completely forget what I learned after a month or two. I think most people are wired this way. Think about a book you read 6 months ago and see how much of it you can still remember. It&rsquo;s scary.</p>

<p>Learning something new in programming is no different. Maybe even worse. But there&rsquo;s good news, because in programming <a href="http://jamesclear.com/learning-vs-practicing">learning by practicing</a> is very easy. You just need a computer and that&rsquo;s it! And hey, now we&rsquo;re in the cloud era. If you need more, go and get what you need with a couple of clicks! It&rsquo;s crazy how much programmers can do these days while sitting on a couch with a cup of coffee. You just need some time and passion. The rest is simply there available for you to grab.</p>

<h2>Hackathons</h2>

<p><a href="https://en.wikipedia.org/wiki/Hackathon">Hackathons</a> are a great way of <a href="http://news.uchicago.edu/article/2015/04/29/learning-doing-helps-students-perform-better-science">learning by doing</a> and we at <a href="http://niposoftware.com/">NIPO Software</a> have started making this a company tradition for a year or so, thanks to my colleague <a href="https://twitter.com/qaidj">Qa'id Jacobs</a> who took the first initiative and continues to put effort into organizing them. Below are some pictures from our last hackathon around summer of 2015.</p>

<p><img src="/assets/Hackathon_Planner/Hackathon_NIPO_1.jpg" alt="NIPO Software Summer 2015 Hackathon 1" /></p>

<p><img src="/assets/Hackathon_Planner/Hackathon_NIPO_2.jpg" alt="NIPO Software Summer 2015 Hackathon 2" /></p>

<p><img src="/assets/Hackathon_Planner/Hackathon_NIPO_3.jpg" alt="NIPO Software Summer 2015 Hackathon 3" /></p>

<p>One of the ideas during this hackathon was building a &ldquo;Hackathon Planner&rdquo;. It didn&rsquo;t get enough love, so was never picked up. Currently all ideas and team compositions are kept and maintained in an Excel file &ndash; the best and the worst tool of all times in computing history. So how about building a planner that can help people capturing ideas and forming teams around those ideas in a fun way?</p>

<h2>A Hackathon Planner &ndash; <a href="https://en.wikipedia.org/wiki/Minimum_viable_product">MVP</a></h2>

<p>A minimum viable hackathon planner;</p>

<ul>
<li>should be open source (not only <a href="http://niposoftware.com/">NIPO Software</a>, anyone or any company should be able to make use of it if they want to do so).</li>
<li>should allow capturing of ideas in a modern way (I hear <a href="https://en.wikipedia.org/wiki/Single-page_application">SPAs</a>, <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a>, subtle animations, web sockets, responsive design).</li>
<li>should allow simple ways of reacting to those ideas (i.e sending likes and possibly comments in the future).</li>
<li>should be simple to sign up and login (built in GitHub authentication?).</li>
<li>should allow a simple way of forming teams (mark the idea/team that you want to join and done!).</li>
<li>should allow live monitoring of teams as they form and evolve. It makes the team formation process more exciting to follow. Watching as ideas live and die (<a href="http://www.asp.net/signalr">signalR</a>,  <a href="http://socket.io/">socket.io</a> ?).</li>
</ul>


<p>Based on these thoughts above I&rsquo;ve created a very basic sketch that can give a general idea:</p>

<p><img src="/assets/Hackathon_Planner/Hackathon_Idea_Details.png" alt="Hackathon Planner - Mockup" /></p>

<h2>Ingredients</h2>

<p>I&rsquo;m very much into <a href="http://aurelia.io/">Aurelia</a> and <a href="https://nodejs.org/">node.js</a> these days. So that&rsquo;s what I&rsquo;ll be using. Sure I&rsquo;ll throw in a NoSQL database too and see how much these decisions will hurt me during production.</p>

<p>I saw <a href="https://twitter.com/jbogard/">@jbogard</a> putting it nicely:</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">one thing i try very hard to do is to not promote any tool/language/framework/platform/pattern until i&#39;ve had to support it in production</p>&mdash; Jimmy Bogard (@jbogard) <a href="https://twitter.com/jbogard/status/691992462483677184">January 26, 2016</a></blockquote>


<p> <script async src="http://www.hakantuncer.com//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>I recently have this theory: How cool a platform, framework, database or a language is directly proportional to the amount of pain one will get during production support.</p>

<p>So we’ll see how this one goes with the choices that I made.. if I can stop slacking off and get to finish the MVP of course.</p>

<p>~Hakan</p>
]]></content>
  </entry>
  
</feed>
