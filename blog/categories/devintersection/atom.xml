<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Devintersection | Hakan Tuncer's Blog]]></title>
  <link href="http://www.hakantuncer.com/blog/categories/devintersection/atom.xml" rel="self"/>
  <link href="http://www.hakantuncer.com/"/>
  <updated>2016-09-08T00:21:15+02:00</updated>
  <id>http://www.hakantuncer.com/</id>
  <author>
    <name><![CDATA[Hakan Tuncer]]></name>
    <email><![CDATA[hakantuncer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zen of Architecture]]></title>
    <link href="http://www.hakantuncer.com/blog/2015/06/28/zen-of-architecture/"/>
    <updated>2015-06-28T13:19:40+02:00</updated>
    <id>http://www.hakantuncer.com/blog/2015/06/28/zen-of-architecture</id>
    <content type="html"><![CDATA[<p><a href="/blog/2015/05/02/devintersection-and-anglebrackets-in-phoenix/">I was at DevIntersection Conference</a> in Phoenix around mid May 2015. Apart from the regular conference schedule, I took a few interesting workshops one of which was &ldquo;Zen of Architecture&rdquo; by <a href="http://www.oreilly.com/pub/au/741">Juval Lowy</a>.</p>

<p>As the name clearly implies one day workshop was all about software architecture and the ways to approach it. Juval talked about a method that he uses for decomposing systems and making design decisions.</p>

<p>It was a full day of content storm with as little breaks in between as possible (this is the Juval style I suppose). I&rsquo;ve been reviewing my notes and presentation slides thinking this can become a book if I try to write everything. So instead, this post focuses on a certain part of the workshop which I think covers the core idea.</p>

<h2>The Method</h2>

<p>Juval introduces a method which he calls &ldquo;The Method&rdquo; for decomposing a system. Achieving the right decomposition of a system is one of the most important things in software architecture. The end result of your decomposition is your architecture.</p>

<blockquote><p>For the beginner architect, there are many options<br/>
For the master architect, there are only a few</p></blockquote>

<h2>Functional Decomposition</h2>

<p>The biggest sin of any software architect. Never ever do functional decomposition!</p>

<br/>


<h4>What is it?</h4>

<ul>
<li>This is also known as the flow-chart decomposition.</li>
<li>Basing services and system components on the order of logical steps in use cases.</li>
<li>Decomposing the system based on features, functional requirements and time.</li>
</ul>


<p>Juval emotionally talks about &ldquo;functional decomposition&rdquo; easily for more than an hour. Can&rsquo;t repeat enough how bad it is and how we&rsquo;re all guilty of doing it from time to time and why we should be very conscious about resisting our bad habits. Say &ldquo;functional decomposition&rdquo; to Juval one more time and he&rsquo;ll kill you right there without blinking.</p>

<br/>


<h4>Why is it so bad?</h4>

<ul>
<li>It leads to duplicating behaviors across services.</li>
<li>It leads to explosion and bloating of services and intricate relationships inside and between them.</li>
<li>It couples multiple services to data contract.</li>
<li>Promotes implementing use cases in higher level terms thus difficult to reuse same behavior in another use case.</li>
<li>Couples services to order and current use cases.</li>
<li>Prevents single point of entry.</li>
</ul>


<br/>


<h4>Example of Functional Decomposition</h4>

<p>Here are  a few slides from the workshop that shows Functional Decomposition in action.</p>

<p><img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2021.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2023.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2024.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2025.jpg" style="border: solid;"></p>

<h2>Volatility-Based Decomposition</h2>

<p>If you would learn one thing from this entire course this should be it, Juval mentioned repeatedly. <strong>You should always decompose a system based on volatility.</strong></p>

<ul>
<li>Identify areas of potential change and encapsulate them in services.</li>
<li>Look for functional potential changes but <strong>not domain functional</strong>. Meaning that while looking for volatility, don&rsquo;t speculate on potential changes to the nature of the business. Don&rsquo;t overdo it.</li>
<li>Implement behavior as interactions between services or subsystems.</li>
<li>Create your milestones based on integration of these services not features.</li>
</ul>


<p>This is the universal principle of good design says Juval. Encapsulate change to insulate. Do not resonate with change. Functional decomposition on the other hand maximizes the impact of change because it&rsquo;s coupled to it.</p>

<br/>


<h4>Challenges with Volatility-Based Decomposition</h4>

<p>There are challenges in creating a Volatility-Based Decomposition. First of all it usually takes longer than functional because volatility is not often self evident. On the other hand features are kept thrown at your face. People around you are feature thirsty, they&rsquo;ll keep asking for their features. You should instead fight the insanity and focus on the bigger picture and volatilities. Getting the management support is usually another challenge. Juval said architects should be responsible, fight against these opposing forces and do what is right.</p>

<br/>


<h4>Axes of volatility</h4>

<p>There are two axes of volatility.</p>

<ul>
<li>At the same customer over time</li>
<li>At the same time across customers</li>
</ul>


<p>These axes should be independent from each other. So encapsulate them from each other as well. When they&rsquo;re not independent it&rsquo;s a sign of functional decomposition.</p>

<p>Prior to architecture and decomposition, as part of requirements gathering and analysis, prepare a list of areas of volatility. Ask what could change along the axes of volatility.</p>

<br/>


<h4>Example of Volatility-Based Decomposition</h4>

<p>Below, you&rsquo;ll find 5 slides from the workshop that brainstorms on possible volatilities of a trading system. Here are some guidelines for capturing volatility:</p>

<ul>
<li>The objective is to have a mindset of &ldquo;what could possibly change?&rdquo;</li>
<li>Capturing the areas of volatility earlier is better than later. The later you figure it out the more it will cost you.</li>
<li>Once settled on the ares of volatility encapsulate them in components of architecture.</li>
<li>You don&rsquo;t need an exhaustive list. This is a process of diminishing returns. Don&rsquo;t overdo it.</li>
<li>Some volatile areas may relate too much to the nature of your business. This type of volatility is out of your scope.</li>
</ul>


<p><img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2026.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2027.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2028.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2029.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2030.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2032.jpg" style="border: solid;"></p>

<br/>


<h4>Let&rsquo;s analyze this decomposition.</h4>

<p>Transition from list of areas of volatility to services is hardly ever pure 1:1. Sometimes a single service encapsulates multiple areas. Some areas may map to an operational concept or may be encapsulated in a third party component.</p>

<p>Always encapsulate the data storage volatility behind data access services. Encapsulate where the storage is, what technology is used to access it and refer your storage as storage, not as database or whatever the actual technology is.</p>

<p>Following 3 slides do further analysis of the decomposition in this example. Please refer to the diagram above as you read the key points:</p>

<p><img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2034.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2035.jpg" style="border: solid;">
<img src="http://www.hakantuncer.com/assets/Zen_of_Architecture/IMG_2036.jpg" style="border: solid;"></p>

<h2>Decomposition and Business</h2>

<p>Avoid encapsulating changes to the nature of your business. Because</p>

<ul>
<li>you&rsquo;ll need it very rarely</li>
<li>you&rsquo;ll be diving into speculation and speculation based design trap</li>
<li>when you do it you&rsquo;ll probably do it very poorly because there are too many unknowns (and again speculations)</li>
</ul>


<p>While designing a system for your business don&rsquo;t only focus on your own also keep your competitor in mind. Design both for you and your competitor. This is a useful posture in designing systems and it&rsquo;s not about features or functionality but it&rsquo;s about understanding the nature of the business. Keeping your competitors in mind and not only focusing on your own business will help you understand the nature of the business even better. This way you can have a better judgement about what is volatile and what is not.</p>

<h2>Decomposition and Longevity</h2>

<p>Volatility is very closely tied to longevity. The longer things do not change the longer they have till they do change or are replaced. The more frequently things change the more likely they would change in the future.</p>

<p>You must take into account impact from change regardless of your requirements. Ask yourself what has changed over the past 5-7 years and what will change in the next 5-7 years. Encapsulate things that would change within the life of your system.</p>

<h2>Further topics</h2>

<p>For the rest of the day Juval dived into</p>

<ul>
<li>layered architectures</li>
<li>typical layers</li>
<li>definition of managers, engines, resource access services and differences between them</li>
<li>open and closed architectures</li>
<li>what not to do when using &ldquo;the method&rdquo;</li>
<li>creating call graphs within system components and observing/revealing anti-patterns</li>
<li>a bonus section called &ldquo;what about agile?&rdquo;</li>
</ul>


<p>All in all it was a mind tickling workshop and I hope I could give you more than only a taste. I may write other posts about the bullet points above if/when I find the time.</p>

<p>Thanks for reading</p>

<p>Hakan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevIntersection &amp; AngleBrackets in Phoenix]]></title>
    <link href="http://www.hakantuncer.com/blog/2015/05/02/devintersection-and-anglebrackets-in-phoenix/"/>
    <updated>2015-05-02T13:46:06+02:00</updated>
    <id>http://www.hakantuncer.com/blog/2015/05/02/devintersection-and-anglebrackets-in-phoenix</id>
    <content type="html"><![CDATA[<p>It&rsquo;s conference season again! Developers from <a href="http://www.niposoftware.com/" target="_blank">NIPO Software</a> were in <a href="http://channel9.msdn.com/Events/Build/2014">Build 2014</a> and <a href="http://www.ndcoslo.com">NDC Oslo 2014</a> last year. This year we&rsquo;ll be at <a href="http://www.ndcoslo.com">NDC Oslo</a> again but this time I myself will be heading to <a href="http://devintersection.com">DevIntersection</a> &amp; <a href="https://anglebrackets.org/">AngleBrackets</a> joint conferences.</p>

<p>Norwegian Developers Conference (NDC) is I think one of the best and I&rsquo;d really enjoyed it last year. But change is good.</p>

<p>Following a deep consideration I reckon that I can&rsquo;t go to Norway again&hellip; Not after all those shrimps I had to sit face to face in Oslo (see OsloFjord Cruises). My friend Bjorn is very disciplined about reminding that to me consistently.</p>

<br/>


<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/hakant">@hakant</a> &quot;We are eagerly awaiting your visit Mr Tuncer...&quot; <a href="http://t.co/JuG6axnSsO">pic.twitter.com/JuG6axnSsO</a></p>&mdash; Bjorn Coltof (@bjorn_coltof) <a href="https://twitter.com/bjorn_coltof/status/593866800149995521">April 30, 2015</a></blockquote>


<p> <script async src="http://www.hakantuncer.com//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<h2>What&rsquo;s going to happen there</h2>

<p>DevIntersection has a number of tracks which are called &ldquo;intersections&rdquo;:</p>

<p><img src="/assets/AngleBrackets_DevIntersection/devintersection_tracks.png" alt="DevIntersection Tracks" /></p>

<p>ASP.NET, Visual Studio and Azure intersections are grouped together since they&rsquo;re highly related to each other. This group of tracks will be my main interest in Phoenix together with the bonus open web event: <a href="https://anglebrackets.org/">anglebrackets</a>.</p>

<p>An exciting aspect of DevIntersection 2015 is that it&rsquo;s the first conference after <a href="http://channel9.msdn.com/Events/Build/2015">Build 2015</a> at which Microsoft made <a href="http://venturebeat.com/2015/04/29/everything-that-happened-at-the-2015-microsoft-build-developer-conference/">a number of big announcements</a>. There&rsquo;s a more detailed list and link aggregation about Build 2015 <a href="http://blog.cwa.me.uk/2015/04/30/the-morning-brew-1851/">here</a> and <a href="http://blog.cwa.me.uk/2015/05/01/the-morning-brew-1852/">here</a> which I highly recommend.</p>

<p>Here is a piece from the official event site:</p>

<blockquote><p>We invite you to the most dynamic developer event in our industry at the next DEVintersection, May 2015. This event is POST BUILD and IGNITE which will allow our presenters to go deep into the new releases and technologies announced. We will focus on Visual Studio, ASP.net, HTML5, Microsoft Azure, XAML, ALM, Architecture, Design and in the bonus co-located open web event anglebrackets we feature Angular JS, HTML5, CSS, Java Script, SPA, SEO, Speech enabled Mobile Apps, Design and much more.</p></blockquote>

<h2>The Schedule</h2>

<p>I&rsquo;ll be attending three workshops. Two of them are before the conference and last one is after the conference on Friday. Each workshop is a day long.</p>

<h2><img src="/assets/AngleBrackets_DevIntersection/DevIntersection%20Workshops_1.png" alt="DevIntersection Tracks" /></h2>

<h2><img src="/assets/AngleBrackets_DevIntersection/DevIntersection%20Workshops_2.png" alt="DevIntersection Tracks" /></h2>

<p>And for the conference itself, I&rsquo;ve looked at the schedule and marked the sessions I&rsquo;m interested in so far. For a number of slots I&rsquo;ve picked more than one session for now &ndash; I&rsquo;ll have to pick one of them on the spot.</p>

<h2><img src="/assets/AngleBrackets_DevIntersection/DevIntersection_Schedule_Tuesday.png" alt="DevIntersection Tracks" /></h2>

<h2><img src="/assets/AngleBrackets_DevIntersection/DevIntersection_Schedule_Wednesday.png" alt="DevIntersection Tracks" /></h2>

<p><img src="/assets/AngleBrackets_DevIntersection/DevIntersection_Schedule_Thursday.png" alt="DevIntersection Tracks" /></p>

<p>As usual I&rsquo;ll be sharing my experiences from the event on twitter and facebook. You can follow me on twitter using <a href="https://twitter.com/hakant">@hakant</a>. And in case you&rsquo;re reading this and also going to DevIntersection in May let&rsquo;s connect and meet there!</p>

<p>Hakan</p>
]]></content>
  </entry>
  
</feed>
