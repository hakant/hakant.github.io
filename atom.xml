<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hakan Tuncer's Blog]]></title>
  <link href="http://hakantuncer.com/atom.xml" rel="self"/>
  <link href="http://hakantuncer.com/"/>
  <updated>2014-04-27T16:29:46+02:00</updated>
  <id>http://hakantuncer.com/</id>
  <author>
    <name><![CDATA[Hakan Tuncer]]></name>
    <email><![CDATA[hakantuncer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Disaster Recovery on Azure]]></title>
    <link href="http://hakantuncer.com/blog/2014/04/27/disaster-recovery-on-azure/"/>
    <updated>2014-04-27T19:30:37+02:00</updated>
    <id>http://hakantuncer.com/blog/2014/04/27/disaster-recovery-on-azure</id>
    <content type="html"><![CDATA[<p>There are things we tend to ignore. Things that we don&rsquo;t want to spend time on or think about because there are no immediate benefits. Disaster recovery is one of those topics. The chances are fairly low, but the impact on our business is catastrophic. The consequences can go as far as losing the business completely. Unless there is some sort of a disaster recovery plan in place.</p>

<p>Because I&rsquo;m working with Microsoft Azure on a daily basis as part of my job, I&rsquo;ll be focusing on Azure but the fundamental principles and concepts should be universal for every cloud platform, or even for on premises type scenarios.</p>

<h2>Two key objectives</h2>

<br>


<blockquote><h5>Recovery Time Objective (RTO)</h5>

<p>Recovery Time Objective is the maximum amount of time allocated for restoring application functionality.</p></blockquote>

<p>This is usually a requirement coming from the business. Basically the question is how critical is your platform and how much down time can you tolerate in such a catastrophic event?</p>

<blockquote><h5>Recovery Point Objective (RPO)</h5>

<p>The recovery point objective (RPO) is the acceptable time window of lost data due to the recovery process.</p></blockquote>

<p>For example, if the RPO is one hour, you must completely back up or replicate the data at least every hour. Once you bring up the application in an alternate datacenter, the backup data may be missing up to an hour of data. Like RTO, critical applications target a much smaller RPO.</p>

<p>These two key objectives determine the approach that needs to be followed and therefore the effort and cost of the whole disaster recovery plan.</p>

<p>The purpose of this blog post is not to describe solutions for each possible combination of these two objectives, but to describe a couple of approaches that can tolerate relatively long recovery time objective (~24 hours) with a more aggressive (so short) recovery point objective.</p>

<p>Don&rsquo;t forget that having a short RTO and RPO together can be both costly and complex to implement depending on the storage needs of your applications.</p>

<h2>Running business on a single datacenter</h2>

<p>Let&rsquo;s say you haven&rsquo;t thought on a disaster recovery plan yet. If your software is deployed on a single datacenter and making use of Azure Storage and/or Azure SQL Database you are at risk of losing your business should your datacenter goes dark due to a disaster or a catastrophic failure.</p>

<p>An Azure datacenter is equipped with fault domains and redundancy to keep your service highly available but these are all inside the datacenter. If the whole datacenter goes down all the compute instances, databases and storage services will go down with it.</p>

<p><img src="http://hakantuncer.com/assets/Disaster_Recovery_On_Azure/Single_Region_Deployment.png" width="500" height="438" title="'Single Region Deployment'" ></p>

<p>Assuming that you still have your software in-house somewhere, there should be no risk of losing the compute instances forever. By creating and deploying the cloud packages on another datacenter the compute instances can be recovered. <strong>The key to business continuity is to be able to recover the data that is stored on Azure Storage and Azure SQL Databases.</strong></p>

<h2>Frequently backup data outside the datacenter</h2>

<p>Whatever the recovery objectives are, backing up application data outside of the datacenter is a must for business continuity. How frequently the data is backed up or synced outside the datacenter will determine the recovery point objective.</p>

<p>When there are backups available outside the datacenter, the environment can be moved to another datacenter by restoring the data and installing compute instances using existing cloud service packages.</p>

<p><img src="http://hakantuncer.com/assets/Disaster_Recovery_On_Azure/Redeploy_Azure_Datacenter.png" alt="Redeploy to another datacenter" /></p>

<p>This is called &ldquo;redeploy&rdquo; recovery model and as you might already guess has a long recovery time objective. All the individual pieces of the environment needs to be moved to another datacenter and redeployed.</p>

<h2>How to backup Azure data (together with RPO and RTO considerations)</h2>

<br><br>


<h4>1. Azure Storage</h4>

<p>The good news is that Azure Storage Service has built-in replication strategies. Two of them are geographical redundancy, meaning that all storage data is replicated across datacenters. That&rsquo;s exactly what disaster recovery is about.</p>

<p><img src="http://hakantuncer.com/assets/Disaster_Recovery_On_Azure/Azure_Storage_Redundancy.png" alt="Azure Storage Geo Redundancy" /></p>

<p>The difference between &ldquo;Geo Redundant&rdquo; and &ldquo;Read-Access Geo Redundant&rdquo; is that the latter allows the redundant data to be accessed at all times in a read-only fashion. This brings us to another important point:</p>

<blockquote><p>Here is what Microsoft&rsquo;s documentation say about the estimated azure storage failover time in case of a disaster:  &ldquo;estimated time that the data will be accessible to customers after a disaster is 24 hours.&rdquo;</p></blockquote>

<p>In the light of these information 3 options appear for backing up the Azure Storage:</p>

<ul>
<li><strong>Geo-Redundancy</strong>: There is no SLA but RPO is practically very short. RTO is long. Only after about 24 hours the failover process will be completed by Microsoft and the data will be available again.</li>
<li><strong>Read-Access Geo Redundant</strong>: RPO is again the same as above. However almost immediately the redundant data can be accessed (read-only) which allows systems to run in a degraded mode (if they&rsquo;re designed in such a fault tolerant way of course). Then again in 24 hours everything will be fully operational.</li>
<li><strong>Custom</strong>: If RTO needs to be shorter, the only option is to look for a third party product that can replicate an azure storage to another datacenter. This redundant storage will always be available in Read/Write mode (since it&rsquo;s just another regular storage account, only in another geographical region).</li>
</ul>


<br>


<h4>2. Azure SQL Databases</h4>

<p>Yesterday I woke up to an <a href="http://view.email.microsoftemail.com/?j=fe9016787161057a71&amp;m=fe621570756503797d1c&amp;ls=fe1817787c60027e711d79&amp;l=fec21c767365017e&amp;s=fe2212717465037a701d78&amp;jb=ff5e177873&amp;ju=fe5711777060017b7611">annoucement from Microsoft</a> introducing new types of databases in Azure with new disaster recovery features:</p>

<p><img src="http://hakantuncer.com/assets/Disaster_Recovery_On_Azure/DisasterRecoveryPerDatabaseType.png" alt="Disaster Recovery Per Database Type" /></p>

<p>Let&rsquo;s look at each option and see what it means:</p>

<ul>
<li><strong>Restore to an alternate Azure region</strong>: This phrase means &ldquo;no silver bullet&rdquo;. Basic type database owners are responsible with their own backup and restore operations. Luckily there is a convenient way to backup and restore an Azure SQL Database regardless of it&rsquo;s type.</li>
</ul>


<br>


<h5>Automatic Database Export:</h5>

<p>Actually there are a couple of ways to replicate or backup a database. But most of these options have their own shortcomings for disaster recovery. There is a feature called <a href="http://msdn.microsoft.com/en-US/library/azure/ff951624.aspx">Database Copy</a> which creates a <a href="http://technet.microsoft.com/en-us/library/ms151176.aspx">transactionally consistent replica</a> of the source database in <strong>the same datacenter.</strong> Because the replica resides in the same datacenter there is no geo-redundancy. But after the copying is completed, this database can be exported to a storage account in another datacenter.</p>

<p>This is exactly what <strong>Automatic Database Export</strong> feature does. It first replicates the database with a copy operation, thus getting a transactionally consistent copy of the database, then exports it to the storage account that is configured. To see how it is configured you can visit <a href="http://blogs.msdn.com/b/sql-bi-sap-cloud-crm_all_in_one_place/archive/2013/07/24/sql-azure-automated-database-export.aspx">this blog post</a>.</p>

<p>A direct manual export operation itself does not generate a transactionally consistent copy of a database. This means you may end up having an Order item in the database with a missing OrderDetails. Automatic Database Export however takes care of this problem. The documentation was not very clear on that so I asked the man himself:</p>

<br>




<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/hakant">@hakant</a> <a href="https://twitter.com/Azure">@Azure</a> yes I&#39;m pretty sure it is</p>&mdash; Scott Guthrie (@scottgu) <a href="https://twitter.com/scottgu/statuses/460180886915276801">April 26, 2014</a></blockquote>


<script async src="http://hakantuncer.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>So we&rsquo;re on the right track here.</p>

<br>


<blockquote><p><strong>Attention:</strong> First part of Automatic Database Export is the replication of the database with Database COPY operation which runs two databases at the same time. This means export operations are partially doubling the database costs.</p></blockquote>

<p>So far so good&hellip; But what determines RTO and RPO for Automatic Database Export? This analysis depends on the frequency and the destination storage configured for the database export operation.</p>

<br>


<ul>
<li><em>Exporting to a separate storage account on another datacenter:</em></li>
</ul>


<p>In this scenario, the RPO will simply be around [Database Export Frequency]. If the database is exported every 6 hours, in the worst case scenario 6 hours of data may be lost.</p>

<p>RTO is simply the [Database Restore Duration]. No need to wait for Microsoft to execute the Azure Storage failover process. The database export file is immediately available on the storage account in the other datacenter.</p>

<br>


<ul>
<li><em>Exporting to the primary storage account on the same datacenter:</em></li>
</ul>


<p>In this scenario, we&rsquo;re relying on the Automated Azure Storage Geo-Replication to get the exported database transferred to another datacenter. Since this scenario uses the geo-replication feature of the storage account there won&rsquo;t be any additional costs for geo-reduntant storage. This is nice indeed.</p>

<p>But in the worst case scenario the RPO can go as far as [2 * Database Export Frequency] if the datacenter happens to fail during the geo-replication process. In that case, the last export file won&rsquo;t be available after the failure but only the one before that will be.</p>

<p>On the other hand, the RTO is [Estimated Azure Storage Geo-Failover Time + Database Restore Duration]. Again, Microsoft&rsquo;s estimation for Azure Storage geo-failover is around 24 hours.</p>

<p>So the moral of the story is that having a dedicated separate Azure Storage account on the other datacenter is beneficial for both RPO and RTO. But as usual the downside is financial. The separate storage account is also billed separately. Both for storage and bandwith to transfer the data. Though it&rsquo;s also worth mentioning that Azure Storage is <a href="http://azure.microsoft.com/en-us/pricing/details/storage/">fairly cheap</a>.</p>

<p>Now let&rsquo;s move to the other disaster recovery features.</p>

<ul>
<li><p><strong>Geo-Replication Passive Replica</strong>: Unfortunately there is no documentation available for this mysterious feature yet. Frankly there is no single mention of this feature anywhere else at the time of this writing. So the technique described above for the Basic databases also applies here until Microsoft actually ships this feature or shares more about it. I&rsquo;ll update this section when that happens.</p></li>
<li><p><strong>Active Geo-Replication</strong>: This one is a silver bullet solution. Unfortunately only the Premium database owners can make use of this feature. With Active Geo-Replication, you can create and maintain up to four readable secondary databases across geographic regions. Basically this gives a very short RPO and RTO for the price of running multiple Premium databases (<a href="http://azure.microsoft.com/en-us/pricing/details/sql-database/#basic-standard-and-premium">which is quite a lot</a>). You can read more about <a href="http://msdn.microsoft.com/en-US/library/azure/dn741339.aspx">Active Geo-Replication on MSDN</a>.</p></li>
</ul>


<h2>Final thoughts</h2>

<p>If your business can tolerate larger than ~24 hrs recovery time objective (RTO) Azure provides a couple of inexpensive features that you can already start making use of. These features also require very little effort to setup and you guarantee business continuity in case of a catastrophic event.</p>

<p>The most cost effective strategy is the following:</p>

<ol>
<li>Make sure your storage account is configured for Geo-Redundancy (default).</li>
<li>Turn on Automatic Database Export and configure a high frequency that makes sense. Keep track of how long this operation takes and adjust your frequency based on that as well.</li>
<li>Set your default azure storage account as the destination of automatic database export. So rely on the geo-redundancy of your storage account.</li>
</ol>


<p>If you need a shorter RTO build up on this strategy. This post is mainly focused on &ldquo;Redeploy&rdquo; pattern. There are other patterns available on MSDN and some are focused on more aggressive RTO&rsquo;s. I recommend reading: <a href="http://msdn.microsoft.com/en-us/library/dn251004.aspx">Disaster Recovery and High Availability for Azure Applications</a>.</p>

<h2>References</h2>

<p>Most information on this blog post is obtained from the following MSDN pages. Some others are direct observations &amp; usage from Azure Management Portal.</p>

<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/dn251004.aspx">Disaster Recovery and High Availability for Azure Applications</a></li>
<li><a href="http://msdn.microsoft.com/library/azure/hh852669.aspx">Azure SQL Database Business Continuity</a></li>
<li><a href="http://msdn.microsoft.com/en-US/library/azure/ff951624.aspx">Copying Databases in Azure SQL Database</a></li>
<li><a href="http://msdn.microsoft.com/en-US/library/azure/hh335292.aspx">How to: Import and Export a Database (Azure SQL Database)</a></li>
<li><a href="http://blogs.msdn.com/b/windowsazure/archive/2014/04/04/sql-database-updates-coming-soon-to-the-premium-preview.aspx">SQL Database updates coming soon to the Premium preview</a></li>
</ul>


<p>Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple Nfield.SDK app]]></title>
    <link href="http://hakantuncer.com/blog/2014/04/15/a-simple-nfield-dot-sdk-app/"/>
    <updated>2014-04-15T20:14:15+02:00</updated>
    <id>http://hakantuncer.com/blog/2014/04/15/a-simple-nfield-dot-sdk-app</id>
    <content type="html"><![CDATA[<p>In a previous blog post I covered the step by step process of <a href="http://hakantuncer.com/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget/">publishing Nfield.SDK to NuGet</a>.</p>

<p>After publishing Nfield.SDK, a natural follow up is to create a simple app that installs Nfield.SDK through NuGet and does something useful with it.</p>

<blockquote><p>To learn more about Nfield or to <a href="http://nfieldmr.com/get-started.aspx" target="_blank">get started</a> visit <a href="http://nfieldmr.com/" target="_blank">nfieldmr.com</a></p></blockquote>

<h2>Installing Nfield.SDK in a Console Application</h2>

<p>What is better than a windows console application to prove that it&rsquo;s really easy to install and use Nfield.SDK. Let&rsquo;s fire up Visual Studio, create a Console Application and install Nfield.SDK through NuGet.</p>

<p>Opening the package manager for my console app and typing nfield in the search box brings me the Nfield.SDK NuGet package:</p>

<p><img src="http://hakantuncer.com/assets/A_Simple_NfieldSDK_App/NfieldSDK_Online_InNuget.png" alt="Nfield SDK Online in Nuget" /></p>

<p>After clicking install, I see that Nfield.SDK is automatically installed and referenced from my project.</p>

<p><img src="http://hakantuncer.com/assets/A_Simple_NfieldSDK_App/NfieldSDK_In_My_Project.png" alt="Nfield SDK Installed In My Project" /></p>

<p>Wait a moment&hellip; I only installed Nfield.SDK but now I see that &ldquo;Json.NET&rdquo;, &ldquo;Microsoft ASP.NET Web API Client Libraries&rdquo; and &ldquo;Microsoft .NET Framework 4 HTTP Client Libraries&rdquo; also got installed. As discussed in the <a href="http://hakantuncer.com/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget/">previos blog post</a> NuGet is smart enough to recursively install packages and all of their dependencies.</p>

<p>In this case Nfield.SDK has a direct dependency to &ldquo;Microsoft ASP.NET Web API Client&rdquo;:</p>

<p><img src="http://hakantuncer.com/assets/A_Simple_NfieldSDK_App/Nfield.SDK_Dependencies.png" alt="Nfield SDK Dependencies on NuGet" /></p>

<p>And &ldquo;Microsoft ASP.NET Web API Client&rdquo; has direct dependency to the rest:</p>

<p><img src="http://hakantuncer.com/assets/A_Simple_NfieldSDK_App/WebApiClient_Dependencies.png" alt="WebApi Client Dependencies on NuGet" /></p>

<p>The point here is that NuGet took care of all the dependencies of my application in one click of an install button.</p>

<h2>Getting ready for coding</h2>

<p>Focusing back to the console application, I&rsquo;m going to create an app that is going to add an interviewer to my domain on Nfield. In order to do that, I need one more ingredient to take care of: an <a href="http://en.wikipedia.org/wiki/Inversion_of_control">Inversion of Control Container</a>.</p>

<p>Nfield.SDK implementation is a little opinionated about the usage of an IoC Container together with it. It won&rsquo;t dictate you which one to use that&rsquo;s why it has an initializer that accepts some key registration methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
<span class='line'>2</span>
<span class='line'>3</span>
<span class='line'>4</span>
<span class='line'>5</span>
<span class='line'>6</span>
<span class='line'>7</span>
<span class='line'>8</span>
<span class='line'>9</span>
<span class='line'>10</span>
</pre></td><td class='code' width='100%'><pre><code class='csharp'><div class='line'>   <span class="c1">/// &lt;summary&gt;</span>
</div><div class='line'>    <span class="c1">/// Method that registers all known types by calling the delegates provided.</span>
</div><div class='line'>    <span class="c1">/// This method must be called before using the SDK.</span>
</div><div class='line'>    <span class="c1">/// &lt;/summary&gt;</span>
</div><div class='line'>    <span class="c1">/// &lt;param name=&quot;registerTransient&quot;&gt;Method that registers a Transient type.&lt;/param&gt;</span>
</div><div class='line'>    <span class="c1">/// &lt;param name=&quot;registerSingleton&quot;&gt;Method that registers a Singleton.&lt;/param&gt;</span>
</div><div class='line'>    <span class="c1">/// &lt;param name=&quot;registerInstance&quot;&gt;Method that registers an instance.&lt;/param&gt;</span>
</div><div class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">Action</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Type</span><span class="p">&gt;</span> <span class="n">registerTransient</span><span class="p">,</span>
</div><div class='line'>                                  <span class="n">Action</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Type</span><span class="p">&gt;</span> <span class="n">registerSingleton</span><span class="p">,</span>
</div><div class='line'>                                  <span class="n">Action</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Object</span><span class="p">&gt;</span> <span class="n">registerInstance</span><span class="p">)</span></div></code></pre></td></tr></table></div></figure>


<br>


<blockquote><p>If you don&rsquo;t know what an IoC Container is there is nothing to worry about. If you just copy the short setup code that I&rsquo;m going to share in a second you&rsquo;re ready to use Nfield.SDK. You don&rsquo;t have to use IoC for your application logic. Again, if you&rsquo;re new to IoC Containers I recommend reading <a href="http://martinfowler.com/articles/injection.html">this paper from Martin Fowler</a>.</p></blockquote>

<p>An IoC container that we frequently use at NIPO Software is <a href="http://www.ninject.org/">Ninject</a>. I&rsquo;ll install it to my project using NuGet again (only the top one in the list below is sufficient).</p>

<p><img src="http://hakantuncer.com/assets/A_Simple_NfieldSDK_App/AddingNinjectToMyApp.png" alt="Adding Ninject To My App" /></p>

<h2>Nfield.SDK in action</h2>

<p>Good. Now I&rsquo;m ready to write my actual business logic. Signing into my Nfield domain and creating an interviewer. Here is how the code looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
<span class='line'>2</span>
<span class='line'>3</span>
<span class='line'>4</span>
<span class='line'>5</span>
<span class='line'>6</span>
<span class='line'>7</span>
<span class='line'>8</span>
<span class='line'>9</span>
<span class='line'>10</span>
<span class='line'>11</span>
<span class='line'>12</span>
<span class='line'>13</span>
<span class='line'>14</span>
<span class='line'>15</span>
<span class='line'>16</span>
<span class='line'>17</span>
<span class='line'>18</span>
<span class='line'>19</span>
<span class='line'>20</span>
<span class='line'>21</span>
<span class='line'>22</span>
<span class='line'>23</span>
<span class='line'>24</span>
<span class='line'>25</span>
<span class='line'>26</span>
<span class='line'>27</span>
<span class='line'>28</span>
<span class='line'>29</span>
<span class='line'>30</span>
<span class='line'>31</span>
<span class='line'>32</span>
<span class='line'>33</span>
<span class='line'>34</span>
<span class='line'>35</span>
<span class='line'>36</span>
<span class='line'>37</span>
<span class='line'>38</span>
<span class='line'>39</span>
<span class='line'>40</span>
<span class='line'>41</span>
<span class='line'>42</span>
<span class='line'>43</span>
</pre></td><td class='code' width='100%'><pre><code class='csharp'><div class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</div><div class='line'><span class="k">using</span> <span class="nn">Nfield.Infrastructure</span><span class="p">;</span>
</div><div class='line'><span class="k">using</span> <span class="nn">Nfield.Models</span><span class="p">;</span>
</div><div class='line'><span class="k">using</span> <span class="nn">Nfield.Services</span><span class="p">;</span>
</div><div class='line'><span class="k">using</span> <span class="nn">Ninject</span><span class="p">;</span>
</div><div class='line'><span class="k">namespace</span> <span class="nn">TestNfieldApp</span>
</div><div class='line'><span class="p">{</span>
</div><div class='line'>    <span class="k">class</span> <span class="nc">Program</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="k">using</span> <span class="p">(</span><span class="n">IKernel</span> <span class="n">kernel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StandardKernel</span><span class="p">())</span>
</div><div class='line'>            <span class="p">{</span>
</div><div class='line'>                <span class="n">InitializeNfield</span><span class="p">(</span><span class="n">kernel</span><span class="p">);</span>
</div><div class='line'>                <span class="k">const</span> <span class="kt">string</span> <span class="n">serverUrl</span> <span class="p">=</span> <span class="s">&quot;https://api.nfieldbeta.com/v1&quot;</span><span class="p">;</span>
</div><div class='line'>                <span class="c1">// First step is to get an INfieldConnection which provides services used for data access and manipulation. </span>
</div><div class='line'>                <span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="n">NfieldConnectionFactory</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">serverUrl</span><span class="p">));</span>
</div><div class='line'>                <span class="c1">// User must sign in to the Nfield server with the appropriate credentials prior to using any of the services.</span>
</div><div class='line'>                <span class="n">connection</span><span class="p">.</span><span class="n">SignInAsync</span><span class="p">(</span><span class="s">&quot;H&quot;</span><span class="p">,</span> <span class="s">&quot;DA&quot;</span><span class="p">,</span> <span class="s">&quot;******&quot;</span><span class="p">).</span><span class="n">Wait</span><span class="p">();</span>
</div><div class='line'>                <span class="kt">var</span> <span class="n">interviewersService</span> <span class="p">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">INfieldInterviewersService</span><span class="p">&gt;();</span>
</div><div class='line'>                <span class="n">interviewersService</span><span class="p">.</span><span class="n">AddAsync</span><span class="p">(</span><span class="k">new</span> <span class="n">Interviewer</span>
</div><div class='line'>                <span class="p">{</span>
</div><div class='line'>                    <span class="n">ClientInterviewerId</span> <span class="p">=</span> <span class="s">&quot;hakantun&quot;</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">UserName</span> <span class="p">=</span> <span class="s">&quot;hakant&quot;</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;Hakan&quot;</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">LastName</span> <span class="p">=</span> <span class="s">&quot;Tuncer&quot;</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">EmailAddress</span> <span class="p">=</span> <span class="s">&quot;h.tuncer@niposoftware.com&quot;</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">Password</span> <span class="p">=</span> <span class="s">&quot;hakan12&quot;</span>
</div><div class='line'>                <span class="p">}).</span><span class="n">Wait</span><span class="p">();</span>
</div><div class='line'>            <span class="p">}</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</div><div class='line'>        <span class="c1">/// Example of initializing the SDK with Ninject as the IoC container.</span>
</div><div class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">InitializeNfield</span><span class="p">(</span><span class="n">IKernel</span> <span class="n">kernel</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="n">DependencyResolver</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">type</span> <span class="p">=&gt;</span> <span class="n">kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">type</span><span class="p">),</span> <span class="n">type</span> <span class="p">=&gt;</span> <span class="n">kernel</span><span class="p">.</span><span class="n">GetAll</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
</div><div class='line'>            <span class="n">NfieldSdkInitializer</span><span class="p">.</span><span class="n">Initialize</span><span class="p">((</span><span class="n">bind</span><span class="p">,</span> <span class="n">resolve</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">kernel</span><span class="p">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">bind</span><span class="p">).</span><span class="n">To</span><span class="p">(</span><span class="n">resolve</span><span class="p">).</span><span class="n">InTransientScope</span><span class="p">(),</span>
</div><div class='line'>                                            <span class="p">(</span><span class="n">bind</span><span class="p">,</span> <span class="n">resolve</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">kernel</span><span class="p">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">bind</span><span class="p">).</span><span class="n">To</span><span class="p">(</span><span class="n">resolve</span><span class="p">).</span><span class="n">InSingletonScope</span><span class="p">(),</span>
</div><div class='line'>                                            <span class="p">(</span><span class="n">bind</span><span class="p">,</span> <span class="n">resolve</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">kernel</span><span class="p">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">bind</span><span class="p">).</span><span class="n">ToConstant</span><span class="p">(</span><span class="n">resolve</span><span class="p">));</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'>    <span class="p">}</span>
</div><div class='line'><span class="p">}</span></div></code></pre></td></tr></table></div></figure>


<p>After I run this application and go to the interviewers page of my domain, I see that the inverviewer I just added is now listed there. Below is a screenshot from the beta version of <a href="https://manager.nfieldbeta.com/">Nfield Management Interface</a> (authentication required).</p>

<p><img src="http://hakantuncer.com/assets/A_Simple_NfieldSDK_App/InterviewerAdded_Success.png" alt="Interviewer Added Successfuly" /></p>

<p>The code I used gets a reference to INfieldInterviewersService and adds an interviewer using this interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
<span class='line'>2</span>
<span class='line'>3</span>
<span class='line'>4</span>
<span class='line'>5</span>
<span class='line'>6</span>
<span class='line'>7</span>
<span class='line'>8</span>
<span class='line'>9</span>
<span class='line'>10</span>
</pre></td><td class='code' width='100%'><pre><code class='csharp'><div class='line'><span class="kt">var</span> <span class="n">interviewersService</span> <span class="p">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">INfieldInterviewersService</span><span class="p">&gt;();</span>
</div><div class='line'><span class="n">interviewersService</span><span class="p">.</span><span class="n">AddAsync</span><span class="p">(</span><span class="k">new</span> <span class="n">Interviewer</span>
</div><div class='line'><span class="p">{</span>
</div><div class='line'>    <span class="n">ClientInterviewerId</span> <span class="p">=</span> <span class="s">&quot;hakantun&quot;</span><span class="p">,</span>
</div><div class='line'>    <span class="n">UserName</span> <span class="p">=</span> <span class="s">&quot;hakant&quot;</span><span class="p">,</span>
</div><div class='line'>    <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;Hakan&quot;</span><span class="p">,</span>
</div><div class='line'>    <span class="n">LastName</span> <span class="p">=</span> <span class="s">&quot;Tuncer&quot;</span><span class="p">,</span>
</div><div class='line'>    <span class="n">EmailAddress</span> <span class="p">=</span> <span class="s">&quot;h.tuncer@niposoftware.com&quot;</span><span class="p">,</span>
</div><div class='line'>    <span class="n">Password</span> <span class="p">=</span> <span class="s">&quot;hakan12&quot;</span>
</div><div class='line'><span class="p">}).</span><span class="n">Wait</span><span class="p">();</span></div></code></pre></td></tr></table></div></figure>


<p>Nfield.SDK has many service interfaces that allow clients to control various aspects of their research projects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
<span class='line'>2</span>
<span class='line'>3</span>
<span class='line'>4</span>
<span class='line'>5</span>
<span class='line'>6</span>
<span class='line'>7</span>
<span class='line'>8</span>
<span class='line'>9</span>
<span class='line'>10</span>
<span class='line'>11</span>
<span class='line'>12</span>
<span class='line'>13</span>
<span class='line'>14</span>
<span class='line'>15</span>
<span class='line'>16</span>
<span class='line'>17</span>
<span class='line'>18</span>
<span class='line'>19</span>
<span class='line'>20</span>
</pre></td><td class='code' width='100%'><pre><code class='csharp'><div class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">Action</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Type</span><span class="p">&gt;</span> <span class="n">registerTransient</span><span class="p">,</span>
</div><div class='line'>                                      <span class="n">Action</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Type</span><span class="p">&gt;</span> <span class="n">registerSingleton</span><span class="p">,</span>
</div><div class='line'>                                      <span class="n">Action</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Object</span><span class="p">&gt;</span> <span class="n">registerInstance</span><span class="p">)</span>
</div><div class='line'><span class="p">{</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">NfieldConnection</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldConnection</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldInterviewersService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldInterviewersService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldSurveysService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldSurveysService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldSurveyDataService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldSurveyDataService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldBackgroundTasksService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldBackgroundTasksService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldSurveyScriptService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldSurveyScriptService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldFieldworkOfficesService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldFieldworkOfficesService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldMediaFilesService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldMediaFilesService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldLanguagesService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldLanguagesService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldTranslationsService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldTranslationsService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldSurveySettingsService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldSurveySettingsService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldSurveyResponseCodesService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldSurveyResponseCodesService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldAddressesService</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldAddressesService</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">INfieldHttpClient</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">NfieldHttpClient</span><span class="p">));</span>
</div><div class='line'>    <span class="n">registerTransient</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IFileSystem</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">FileSystem</span><span class="p">));</span>
</div><div class='line'><span class="p">}</span></div></code></pre></td></tr></table></div></figure>


<p>I think that&rsquo;s a post. I hope I could shed some light on getting up and running with Nfield.SDK and the various things that you can do with it.</p>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Publishing Nfield.SDK to NuGet]]></title>
    <link href="http://hakantuncer.com/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget/"/>
    <updated>2014-04-13T18:34:32+02:00</updated>
    <id>http://hakantuncer.com/blog/2014/04/13/publishing-nfield-dot-sdk-to-nuget</id>
    <content type="html"><![CDATA[<p>A couple of days ago I published Nfield.SDK to NuGet. In this blog post I want to describe the steps that are involved. Obviously this process will equally apply to publishing / consuming any other software library or package using NuGet.</p>

<h2>What is Nfield SDK</h2>

<p>Me and my colleagues at <a href="http://www.niposoftware.com/">NIPO Software</a> are building the next generation data collection platform called <a href="http://www.nfieldmr.com/">Nfield</a>. Nfield has an <a href="https://github.com/NIPOSoftware/Nfield-SDK">open source SDK</a> that market research offices can use to streamline and automate setting up their research projects.</p>

<h2>NuGet and Package Management Systems</h2>

<p>If you&rsquo;re a .NET developer or familiar with Microsoft development environment you probably know what Nuget is. Nuget is an open source package manager for Microsoft development platform (including .NET). Package management systems make poor developers&#8217; lives rock (well almost). It eases everything about installing libraries and managing dependencies. It also opens up lots of automation possibilities &ndash; like integrating dependency management into the build process. The home of nuget is <a href="http://www.nuget.org">www.nuget.org</a>.</p>

<p>Most platforms have their own package management systems. Ruby has <a href="https://rubygems.org">RubyGems</a>, Node.js has <a href="https://www.npmjs.org">npm</a>, Apache has <a href="http://maven.apache.org">Maven</a> and it works with multiple platforms but it&rsquo;s primarily used by the Java community. Package managers don&rsquo;t only exist in the context of software development. There are also system-wide package managers to install components and applications for operating systems. For more information check out <a href="http://en.wikipedia.org/wiki/Package_management_system">Package Management System</a> and <a href="http://en.wikipedia.org/wiki/List_of_software_package_management_systems">List of Package Management Systems</a> on Wikipedia.</p>

<h2>Step by step &ndash; Publishing Nfield.SDK to NuGet</h2>

<br><br>


<h3>1. Cloning Nfield.SDK from GitHub</h3>

<p>When it comes to Git I have a couple of ways to interact. I either directly use the Git commands from a shell or <a href="https://windows.github.com/">GitHub for Windows</a> and lately I&rsquo;m also very happy with the Git integration of Visual Studio 2013. In this case I&rsquo;ll just go ahead and use GitHub for Windows to clone Nfield.SDK to my local repository.</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/NfieldSDK_GitHub_For_Windows.png" alt="Cloning Nfield SDK" /></p>

<p>After cloning is finished, now all files are on my local repository.</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/NfieldSDK_Folder.png" alt="Nfield SDK Folder" /></p>

<br>


<h3>2. Creating a .nuspec file for Nfield.SDK project</h3>

<p>.nuspec files are XML manifests which describe nuget packages. A .nuspec manifest is used to build a nuget package and it&rsquo;s also stored inside the package after the package is created. There is a <a href="http://docs.nuget.org/docs/reference/nuspec-reference">.nuspec reference</a> in nuget.org.</p>

<p>So whenever we want to create a nuget package, we first need to create a .nuspec file. Nuget.exe command line utility allows us to create .nuspec files from .csproj files. You can also create a blank .nuspec file but pointing to an existing .csproj file makes things a lot easier since it&rsquo;s automatically detecting some of the metadata for us.</p>

<figure class='code'><figcaption><span>run this command on the directory where the .csproj file is located</span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
</pre></td><td class='code' width='100%'><pre><code class='bash'><div class='line'>nuget spec</div></code></pre></td></tr></table></div></figure>


<p>After running this nuget command NField.SDK.nuspec file is created for us under the same directory.</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/nuspec_file.png" alt="Nfield SDK nuspec file" /></p>

<p>Let&rsquo;s look at the .nuspec file that is generated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
<span class='line'>2</span>
<span class='line'>3</span>
<span class='line'>4</span>
<span class='line'>5</span>
<span class='line'>6</span>
<span class='line'>7</span>
<span class='line'>8</span>
<span class='line'>9</span>
<span class='line'>10</span>
<span class='line'>11</span>
<span class='line'>12</span>
<span class='line'>13</span>
<span class='line'>14</span>
<span class='line'>15</span>
<span class='line'>16</span>
<span class='line'>17</span>
<span class='line'>18</span>
</pre></td><td class='code' width='100%'><pre><code class='xml'><div class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</div><div class='line'><span class="nt">&lt;package</span> <span class="nt">&gt;</span>
</div><div class='line'>  <span class="nt">&lt;metadata&gt;</span>
</div><div class='line'>    <span class="nt">&lt;id&gt;</span>$id$<span class="nt">&lt;/id&gt;</span>
</div><div class='line'>    <span class="nt">&lt;version&gt;</span>$version$<span class="nt">&lt;/version&gt;</span>
</div><div class='line'>    <span class="nt">&lt;title&gt;</span>$title$<span class="nt">&lt;/title&gt;</span>
</div><div class='line'>    <span class="nt">&lt;authors&gt;</span>$author$<span class="nt">&lt;/authors&gt;</span>
</div><div class='line'>    <span class="nt">&lt;owners&gt;</span>$author$<span class="nt">&lt;/owners&gt;</span>
</div><div class='line'>    <span class="nt">&lt;licenseUrl&gt;</span>http://LICENSE_URL_HERE_OR_DELETE_THIS_LINE<span class="nt">&lt;/licenseUrl&gt;</span>
</div><div class='line'>    <span class="nt">&lt;projectUrl&gt;</span>http://PROJECT_URL_HERE_OR_DELETE_THIS_LINE<span class="nt">&lt;/projectUrl&gt;</span>
</div><div class='line'>    <span class="nt">&lt;iconUrl&gt;</span>http://ICON_URL_HERE_OR_DELETE_THIS_LINE<span class="nt">&lt;/iconUrl&gt;</span>
</div><div class='line'>    <span class="nt">&lt;requireLicenseAcceptance&gt;</span>false<span class="nt">&lt;/requireLicenseAcceptance&gt;</span>
</div><div class='line'>    <span class="nt">&lt;description&gt;</span>$description$<span class="nt">&lt;/description&gt;</span>
</div><div class='line'>    <span class="nt">&lt;releaseNotes&gt;</span>Summary of changes made in this release of the package.<span class="nt">&lt;/releaseNotes&gt;</span>
</div><div class='line'>    <span class="nt">&lt;copyright&gt;</span>Copyright 2014<span class="nt">&lt;/copyright&gt;</span>
</div><div class='line'>    <span class="nt">&lt;tags&gt;</span>Tag1 Tag2<span class="nt">&lt;/tags&gt;</span>
</div><div class='line'>  <span class="nt">&lt;/metadata&gt;</span>
</div><div class='line'><span class="nt">&lt;/package&gt;</span></div></code></pre></td></tr></table></div></figure>


<p>First thing you&rsquo;ll notice is the variable names that start and end with a $ sign. In the next step, when we generate the actual package, the package generator will be told to grab these metadata from the assembly information.</p>

<p>Here is how the assembly information of Nfield.SDK looks like:</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/Nfield.SDK_AssemblyInfo.png" alt="Nfield SDK Assembly info" /></p>

<p>Other fields which don&rsquo;t contain variable names need to be filled in before generating the package. Here is the .nuspec file after I edited all these fields:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
<span class='line'>2</span>
<span class='line'>3</span>
<span class='line'>4</span>
<span class='line'>5</span>
<span class='line'>6</span>
<span class='line'>7</span>
<span class='line'>8</span>
<span class='line'>9</span>
<span class='line'>10</span>
<span class='line'>11</span>
<span class='line'>12</span>
<span class='line'>13</span>
<span class='line'>14</span>
<span class='line'>15</span>
<span class='line'>16</span>
<span class='line'>17</span>
<span class='line'>18</span>
</pre></td><td class='code' width='100%'><pre><code class='xml'><div class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</div><div class='line'><span class="nt">&lt;package</span> <span class="nt">&gt;</span>
</div><div class='line'>  <span class="nt">&lt;metadata&gt;</span>
</div><div class='line'>    <span class="nt">&lt;id&gt;</span>$id$<span class="nt">&lt;/id&gt;</span>
</div><div class='line'>    <span class="nt">&lt;version&gt;</span>$version$<span class="nt">&lt;/version&gt;</span>
</div><div class='line'>    <span class="nt">&lt;title&gt;</span>$title$<span class="nt">&lt;/title&gt;</span>
</div><div class='line'>    <span class="nt">&lt;authors&gt;</span>$author$<span class="nt">&lt;/authors&gt;</span>
</div><div class='line'>    <span class="nt">&lt;owners&gt;</span>$author$<span class="nt">&lt;/owners&gt;</span>
</div><div class='line'>    <span class="nt">&lt;licenseUrl&gt;</span>http://www.gnu.org/licenses<span class="nt">&lt;/licenseUrl&gt;</span>
</div><div class='line'>    <span class="nt">&lt;projectUrl&gt;</span>https://github.com/NIPOSoftware/Nfield-SDK<span class="nt">&lt;/projectUrl&gt;</span>
</div><div class='line'>    <span class="nt">&lt;iconUrl&gt;&lt;/iconUrl&gt;</span>
</div><div class='line'>    <span class="nt">&lt;requireLicenseAcceptance&gt;</span>false<span class="nt">&lt;/requireLicenseAcceptance&gt;</span>
</div><div class='line'>    <span class="nt">&lt;description&gt;</span>$description$<span class="nt">&lt;/description&gt;</span>
</div><div class='line'>    <span class="nt">&lt;releaseNotes&gt;&lt;/releaseNotes&gt;</span>
</div><div class='line'>    <span class="nt">&lt;copyright&gt;</span>Copyright © NIPO Software 2013<span class="nt">&lt;/copyright&gt;</span>
</div><div class='line'>    <span class="nt">&lt;tags&gt;</span>nfield marketresearch capi cawi<span class="nt">&lt;/tags&gt;</span>
</div><div class='line'>  <span class="nt">&lt;/metadata&gt;</span>
</div><div class='line'><span class="nt">&lt;/package&gt;</span></div></code></pre></td></tr></table></div></figure>


<br>


<h3>3. Creating the actual nuget package (.nupkg) for Nfield.SDK</h3>

<br>




<figure class='code'><figcaption><span>executing the nuget package command for Nfield.SDK in release mode</span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
</pre></td><td class='code' width='100%'><pre><code class='bash'><div class='line'>nuget pack Nfield.SDK.csproj -Prop <span class="nv">Configuration</span><span class="o">=</span>Release</div></code></pre></td></tr></table></div></figure>


<p>Notice that &ldquo;nuget pack&rdquo; command is not executed on the .nuspec file but on the .csproj file. But according to the nuget documentation this command picks up both the .nuspec file and the .csproj file from the directory. After executing the pack command here is what I got:</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/Icon_URL_CanNotBeEmpty.png" alt="Nfield SDK - Icon Url Can't be empty" /></p>

<p>For a moment, I thought ignoring the iconUrl entry in the .nuspec file would not be a big deal but I was wrong.</p>

<p>This is what <a href="">.nuspec reference</a> says about the iconUrl:</p>

<blockquote><p>A URL for the image to use as the icon for the package in the Manage NuGet Packages dialog box. This should be a 32x32-pixel .png file that has a transparent background.</p></blockquote>

<p>I immediately headed to <a href="http://nfieldmr.com/">http://nfieldmr.com/</a> to steal an nfield icon and indeed I found one. I shrinked the size to 32x32 and then committed it to the root of Nfield.SDK github repository.. hoping to be able to get a public URL for it afterwards. And voila! check the image below. Clicking the &ldquo;Raw&rdquo; button gives me this URL for my new icon: <a href="https://raw.githubusercontent.com/NIPOSoftware/Nfield-SDK/development/icon-nfield.png">https://raw.githubusercontent.com/NIPOSoftware/Nfield-SDK/development/icon-nfield.png</a></p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/nfield-icon-on-github.png" alt="Nfield icon on github" /></p>

<p>So after putting the icon URL into the .nuspec file here is what I have.. the final version of the .nuspec file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
<span class='line'>2</span>
<span class='line'>3</span>
<span class='line'>4</span>
<span class='line'>5</span>
<span class='line'>6</span>
<span class='line'>7</span>
<span class='line'>8</span>
<span class='line'>9</span>
<span class='line'>10</span>
<span class='line'>11</span>
<span class='line'>12</span>
<span class='line'>13</span>
<span class='line'>14</span>
<span class='line'>15</span>
<span class='line'>16</span>
<span class='line'>17</span>
<span class='line'>18</span>
</pre></td><td class='code' width='100%'><pre><code class='xml'><div class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</div><div class='line'><span class="nt">&lt;package</span> <span class="nt">&gt;</span>
</div><div class='line'>  <span class="nt">&lt;metadata&gt;</span>
</div><div class='line'>    <span class="nt">&lt;id&gt;</span>$id$<span class="nt">&lt;/id&gt;</span>
</div><div class='line'>    <span class="nt">&lt;version&gt;</span>$version$<span class="nt">&lt;/version&gt;</span>
</div><div class='line'>    <span class="nt">&lt;title&gt;</span>$title$<span class="nt">&lt;/title&gt;</span>
</div><div class='line'>    <span class="nt">&lt;authors&gt;</span>$author$<span class="nt">&lt;/authors&gt;</span>
</div><div class='line'>    <span class="nt">&lt;owners&gt;</span>$author$<span class="nt">&lt;/owners&gt;</span>
</div><div class='line'>    <span class="nt">&lt;licenseUrl&gt;</span>http://www.gnu.org/licenses<span class="nt">&lt;/licenseUrl&gt;</span>
</div><div class='line'>    <span class="nt">&lt;projectUrl&gt;</span>https://github.com/NIPOSoftware/Nfield-SDK<span class="nt">&lt;/projectUrl&gt;</span>
</div><div class='line'>    <span class="nt">&lt;iconUrl&gt;</span>https://raw.githubusercontent.com/NIPOSoftware/Nfield-SDK/development/icon-nfield.png<span class="nt">&lt;/iconUrl&gt;</span>
</div><div class='line'>    <span class="nt">&lt;requireLicenseAcceptance&gt;</span>false<span class="nt">&lt;/requireLicenseAcceptance&gt;</span>
</div><div class='line'>    <span class="nt">&lt;description&gt;</span>$description$<span class="nt">&lt;/description&gt;</span>
</div><div class='line'>    <span class="nt">&lt;releaseNotes&gt;&lt;/releaseNotes&gt;</span>
</div><div class='line'>    <span class="nt">&lt;copyright&gt;</span>Copyright © NIPO Software 2013<span class="nt">&lt;/copyright&gt;</span>
</div><div class='line'>    <span class="nt">&lt;tags&gt;</span>nfield marketresearch capi cawi<span class="nt">&lt;/tags&gt;</span>
</div><div class='line'>  <span class="nt">&lt;/metadata&gt;</span>
</div><div class='line'><span class="nt">&lt;/package&gt;</span></div></code></pre></td></tr></table></div></figure>


<p>After running the same nuget pack command one more time, the package is successfully created.</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/SuccessfulPackageCreation_1.png" alt="Nfield SDK - Successful Package Creation 1" /></p>

<p>And here is how the package (.nupkg) looks like in the library folder:</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/SuccessfulPackageCreation_2.png" alt="Nfield SDK - Successful Package Creation 2" /></p>

<h3>4. Publishing the Nfield.SDK package to nuget</h3>

<p>Now I have my nuget package file waiting to be published. Or wait&hellip; maybe I should test it before publishing it to the public NuGet repository. There is a way to create a local package repository on the local file system of the machine and test the package using this local nuget repository. But because this blog post is getting longer than I expected I will save it for another day.</p>

<p>Let&rsquo;s assume that I&rsquo;ve tested the Nfield.SDK nuget package and I&rsquo;m ready to publish it. First thing that is necessary is to get the long due NIPO Software account on nuget.org.</p>

<p>Checkout the screenshot below from nuget.org account page of NIPO Software. Two big buttons on the first row tells me that I can upload packages using nuget.org and I can also manage my existing packages. The other interesting information is the &ldquo;API Key&rdquo; at the bottom. This is a GUID that can be used from the nuget command utility. Using this key it&rsquo;s possible to publish nuget packages from the command line without signing in to nuget.org.</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/NIPOSoftware-NuGet.png" alt="Nipo Software NuGet Account" /></p>

<p>So this means it&rsquo;s possible to publish a nuget package both using nuget.exe from command line and using nuget.org. This is how nuget packages are pushed using nuget.exe:</p>

<figure class='code'><figcaption><span>publishing Nfield.SDK using nuget.exe</span></figcaption><div class="highlight"><table cellpadding="0" cellspacing="0"><tr><td class="gutter"><pre class="line-numbers"><span class='line'>1</span>
<span class='line'>2</span>
</pre></td><td class='code' width='100%'><pre><code class='bash'><div class='line'>nuget SetApiKey NIPOSoftware-API-Key
</div><div class='line'>nuget push Nfield.SDK.1.0.0.0.nupkg</div></code></pre></td></tr></table></div></figure>


<p>I took the other approach and directly uploaded the package using nuget.org web interface. After I uploaded the &ldquo;Nfield.SDK.1.0.0.0.nupkg&rdquo; file, nuget.org asked me to verify the details of the package before clicking publish the last time.</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/VerifyingUpload_RightBeforePublish.png" alt="Nfield SDK - Verify NuGet Publish" /></p>

<p>All seems fine for now and I click publish. The package is published for the world to see. Below you see the Nfield.SDK page from the NuGet Gallery. Using &ldquo;Install-Package Nfield.SDK&rdquo; command from the VS Package Manager Console will install Nfield SDK to your project. Also notice near the bottom there is a section called &ldquo;Dependencies&rdquo;. Nfield.SDK depends on one other nuget package and it&rsquo;s visible here. This was automatically handled by nuget when I created the package using the .csproj file.</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/SuccessfullyUploadedNfield.SDK.png" alt="Nfield SDK - Successfully uploaded to Nuget" /></p>

<p>So now as a final step, let&rsquo;s go to Visual Studio and find Nfield.SDK in package manager. Searching for Nfield brings me the Nfield.SDK package. Here is a screenshot right before I installed Nfield.SDK for my Nfield test project which I will discuss in my next blog post.</p>

<p><img src="http://hakantuncer.com/assets/NfieldSDK_Nuget/NfieldSDK_Online_InNuget.png" alt="Nfield SDK - Online in NuGet" /></p>

<p>Now that Nfield.SDK is online on NuGet, I can easily install and access it from my own projects. In the next blog post I&rsquo;ll show you how you can install Nfield.SDK and use it to do something useful &ndash; like adding an interviewer to your market research office.</p>

<p>Until then, take care.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft BUILD Conference 2012 – Thoughts &amp; Highlights]]></title>
    <link href="http://hakantuncer.com/blog/2012/11/18/microsoft-build-conference-2012-thoughts-and-highlights/"/>
    <updated>2012-11-18T18:29:03+01:00</updated>
    <id>http://hakantuncer.com/blog/2012/11/18/microsoft-build-conference-2012-thoughts-and-highlights</id>
    <content type="html"><![CDATA[<p>Microsoft is heading towards a new era with it’s Windows ecosystem and Azure cloud platform.</p>

<h2>Azure adoption on fire</h2>


<p>It’s been repeated several times during the conference that Microsoft is surprised by the demand to their Windows Azure cloud computing platform. In his session, Mark Russinovich mentioned that getting a new  Azure datacenter up and running from the decision phase to reality takes about one and a half years and at the moment they’re constantly investing in new datacenters.</p>

<h2>Weak Windows Store App ecosystem</h2>


<p>On the other hand, the new Windows ecosystem, Windows RT and Windows Phone, are pretty latecomers in the market where iOS and Android devices heavily dominate. These new Windows operating systems and devices have been taken very positively by the tech media  in general but with one big question: Will the Windows app ecosystem be able to catch the momentum and compete with it’s competitors? This has been declared as the weakest spot of the new generation of Windows devices and Microsoft is well aware of it.</p>

<h2>Microsoft is Opening Up – A Mindset Shift</h2>


<p>This is the reason why Microsoft is doing everything it can to get developers on board and convince them building applications for the Windows store. They’ve been trying to present a compelling development story from design stage to submitting the app to the Windows Store, trying to make this a joyful experience for developers building Windows Store apps. They’re educating developers, giving them free ebooks, devices and a lot of sample applications. Everything is done for creating a rapid development momentum that will enrich the Windows Store with many applications.</p>

<p>Another part of this story is about  the steps that Microsoft is taking with it’s technical stack. For many years Microsoft had been very exclusionary of software languages and stacks that were not “invented” under it’s control. Every solution Microsoft was offering needed to be 100% Microsoft.</p>

<p>This “not invented here” mentality seems to be fading away. Microsoft has been investing heavily on Javascript. Chakra engine of IE, the TypeScript language and the Javascript API’s of Windows RT are clear examples of this investment. Strange enough, a Windows 8 application can now completely be written using Javascript, CSS and HTML. Smart move to get more developer support, which is now very critical for Microsoft.</p>

<p>Who would think one day someone would be able to run Linux servers on Microsoft datacenters? Or Azure Command Line Tools would be written in Javascript using Node.js. Microsoft is definitely opening up.</p>

<h2>Some Highlights from the Trip</h2>




<br>


<h5>Monday – October 29</h5>


<ul>
<li>It was somewhat stressful to fly on the worst day of Hurricane Sandy. Fortunately the flight was not cancelled. The route was over the Greenland and there was quite some scene through the window.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/MountainsFromPlane.JPG" alt="Mountains from the plane" /></p>

<p><img src="http://hakantuncer.com/assets/BuildConference_2012/Flight_Map.JPG" alt="Flight map" /></p>

<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IceEverywhere.JPG" alt="Ice everywhere" /></p>

<br>


<ul>
<li>First day was only about registration. There was a long registration queue all day but fortunately it  got much shorter later around 19:00. And I got my badge.</li>
</ul>


<br>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/BuildBadge.jpg" alt="Build Badge" /></p>

<h5>Tuesday – October 30</h5>


<ul>
<li>Heading to the tent for breakfast. Further down, there is a much bigger tent with a Windows logo on it. That’s where keynotes will take place.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/TreesRedmond.JPG" alt="BigTent" /></p>

<ul>
<li><p>First keynote was given by Steve Ballmer, CEO of Microsoft. It was about the most important delivery of Microsoft: Windows 8. About how the family of Windows 8 PC’s and mobile devices live in harmony together, with SkyDrive backing them up.</p></li>
<li><p>Steve Ballmer actually gave a demo himself, which was unusual but I think very positive. It’s a general expectation these days: CEO of a high tech company should be “hands on” with the technology. Technically savvy managers are more popular indeed. It looks like Steve also pushes himself towards that direction.</p></li>
<li><p>You can watch the whole show here:</p></li>
</ul>


<p> <a href="http://channel9.msdn.com/Events/Build/2012/1-001">http://channel9.msdn.com/Events/Build/2012/1-001</a></p>

<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0091.JPG" alt="BallmerOnStage" /></p>

<ul>
<li><p>This first day was completely about Windows 8. In fact, Azure Cloud Platform would be the topic of the second keynote on the second day of BUILD conference.</p></li>
<li><p>We were having breakfast and lunch in the big tents that were built right next to the conference buildings. Yes, tents are not very exciting but the food was.</p></li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/photo1.jpg" alt="Good Food" /></p>

<h5>Wednesday – October 31</h5>


<ul>
<li>The second keynote of the BUILD conference was about the other important pursuit of Microsoft, the Azure Cloud, and the applications that developers can build into it. Applications that can be built lego style, using the tools and pulling the libraries as you like.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0122.JPG" alt="Second Keynote" /></p>

<ul>
<li>Scott Guthrie presented Azure Mobile &amp; Media Services and Hanselman gave a short demo of new ASP.NET features and support for known social networks. All applications written during demos are eventually getting deployed on Azure. So basically now Azure plays a role in every server side technology of Microsoft.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0127.JPG" alt="Scott Guthrie" /></p>

<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0128.JPG" alt="Hanselman" /></p>

<ul>
<li>After the keynote, heading towards the session buildings. And the red trees of Seattle…</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0131.JPG" alt="Redmond Red Trees" /></p>

<h5>Thursday – November 1</h5>


<ul>
<li>There were four rooms where you can borrow some brain from the experts. Everyone had certain office hours. This was not a very easy experience though. For some of these brains one had to wait a long time in the queue.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/photo.jpg" alt="Brain Box" /></p>

<ul>
<li>Channel9 broadcasting studio. It was in the same building where some of the sessions took place.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0108.JPG" alt="Channel 9" /></p>

<ul>
<li>BUILD conference map on the ground.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0109.jpg" alt="Conference Map" /></p>

<h5>Friday – November 2</h5>


<p></p>

<ul>
<li>Two public figures Scott Hanselman and Jon Galloway preparing for the last session of the BUILD.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0211.JPG" alt="Build Last Session" /></p>

<ul>
<li>This strange sign took my attention.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0203.jpg" alt="Strange Notification" /></p>

<h5>Saturday – November 3</h5>


<ul>
<li><p>At the final day of my trip, after the conference, I found some time to hang around in Seattle.</p></li>
<li><p>A Windows Store in Seattle. At the time of this writing, there are around 60 of these in various states  in U.S.</p></li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/img_0057.jpg" alt="Windows Store in Seattle" /></p>

<ul>
<li>Seattle is the birthplace of Starbucks. As a matter of fact, this Starbucks shop is where it all started.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/IMG_0267.JPG" alt="Birthplace of Starbucks" /></p>

<ul>
<li>Somewhere in Seattle, a building on which everybody is sticking gums. I don’t know the reason or the story behind it. But it was really disgusting to be there next to it…</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/img_02821.jpg" alt="Gum Wall" /></p>

<ul>
<li>Space Needle is one of the symbols of Seattle. I also went up there, obviously a great view.</li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/img_0350.jpg" alt="Seattle Space Needle" /></p>

<ul>
<li>I’ve also seen Chihuly’s Garden &amp; Glass Exhibition. The art here was truly amazing.
<a href="http://www.chihulygardenandglass.com/" target="_blank">Chihuly Garden And Glass &ndash; Website</a></li>
</ul>


<p><img src="http://hakantuncer.com/assets/BuildConference_2012/img_0361.jpg" alt="Seattle Space Needle" /></p>

<p><img src="http://hakantuncer.com/assets/BuildConference_2012/img_0329.jpg" alt="Seattle Space Needle" /></p>

<p><img src="http://hakantuncer.com/assets/BuildConference_2012/img_0338.jpg" alt="Seattle Space Needle" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Startup Weekend Amsterdam Experience]]></title>
    <link href="http://hakantuncer.com/blog/2010/10/20/startup-weekend-amsterdam-experience/"/>
    <updated>2010-10-20T20:52:30+02:00</updated>
    <id>http://hakantuncer.com/blog/2010/10/20/startup-weekend-amsterdam-experience</id>
    <content type="html"><![CDATA[<p>A few weeks ago I attended Startup Weeekend Amsterdam. I should say, it was really a weekend full of ideas, creativity, productivity and nice people.</p>

<p>To describe very briefly, Startup Weekend events are short, weekend long events that are organized all around the world where attenders join together to pitch ideas and build products/services around those ideas. It is all self-contained. Everything is done by the attenders, from pitching ideas to forming teams, working over the weekend to realize those ideas and presenting them to the panelists. The organization behind Startup Weekend  provides place, food and the panelists. ;) ..and by the way, as far as I heard, they’re not earning money from these events.</p>

<p><img src="http://hakantuncer.com/assets/StartupWeekendAmsterdam/img_1674.jpg" alt="Startup Weekend Amsterdam" /></p>

<p>I payed around €60 and bought a software developer ticket for myself. Tickets are simply attached to roles like marketing, sales, law, software development etc.. There was also one called “Jack of all Trades” for those who wanted to cheat a little bit.</p>

<p>Friday evening, event started with a brief introduction talk and afterwards, attenders with ideas started taking turns and presenting their ideas. Everybody had like a minute and a half to introduce their ideas. Around 40 people made a pitch, which I heard is a pretty good number compared to the number of ideas presented in other Startup Weekend sessions around the world. This idea pitching section was followed by a short break and a voting session.</p>

<p>Owners of 8-10 ideas receiving the highest number of votes took turns again to talk for another 30 seconds and call people to join their team. This part was especially fun because idea owners were trying to do all kinds of things to attract other people to work for them over the weekend.</p>

<p>I watched teams evolve in about 45 minutes.. It was like a party where everybody was talking to each other. Once a group of people form a team, they were moving to the study room, which was a quite cool place. There were no any sort of rules for forming teams.. No restrictions. Whoever had their teams ready, were moving on.</p>

<p>I worked in two teams throughout the weekend and kept an eye on other teams. Just for fun.. Watching how things were developing from being bare concepts / ideas in to something concrete was really interesting.. These people didn’t know each other few hours before and now they were working together to accomplish something.</p>

<p>On Sunday evening, teams presented their business ideas along with their weekend accomplishments to the panelists. Every team had 3 minutes to show their magic. From there on, panelists made their decisions about the winners. There were technologists, entrepreneurs, lawyers and investors among the panelists (you can find them on Startup Weekend Amsterdam).</p>

<p>A couple of  ideas I liked:</p>

<ul>
<li>Japps.me (Job application management tool): Having hard time following and managing your job applications? Using this tool you might have kept track of your job applications, related conversations, statuses etc.. I think it is a very good idea, but of course the implementation matters a lot.
Pulsetree (Social idea mining tool): Now it is very obvious to me that this is going to be a very hot/big concept soon.</li>
<li><p>It is about hooking up to social networks, blogs etc. (via API’s) to sniff opinions about products or companies and preferably allowing companies to engage with the opinion makers. Catching the opinions about their products and engaging with the opinion makers will be something vital for large companies.</p></li>
<li><p>123 Dress me: The idea was mainly started with an iPhone application in which users can put the photos of their clothes in their closet in a top, middle and bottom manner. Then this application will allow them to match their clothes and give them an idea about what new combinations they can try. This opens many possibilities like displaying ads from stores, and now you can match your existing clothes with pieces from stores, and even order them with a single tap maybe..</p></li>
<li><p>Alter-Ego (a smart phone game about sustainability) : Inspired by mobile games that are tightly integrated with player’s real life, these guys are putting real life goals for the players and letting them earn points based on their real life accomplishments. Although verifying many types of accomplishments are impossible and made me very skeptic about this game’s future, the idea really fits well into the current trend. (Some accomplishments are like taking the public transportation instead of your car, or using nature friendly commodities and helping the sustainability). These guys were chosen as winners and won free office space in Amsterdam for a year.</p></li>
</ul>


<p>The location was a courtesy of “Kennedy Van der Laan”. And organizers said that it was the best place they’d ever gotten so far.. Indeed the building was very nicely decorated. I should say, it was a right place to start a company. :)</p>
]]></content>
  </entry>
  
</feed>
